/*             |￣￣￣￣￣￣\                                                                  *
 *             |    STOP   |                                                                 *
 *             |   EDITING |                                                                 *
 *             |    THIS   |                                                                 *
 *             |    FILE   |                                                                 *
 *             | ＿＿＿＿＿ /                                                                 *
 *             (\__/)  ||                                                                    *
 *             (•ㅅ•)  ||                                                                    *
 *             / 　 づ                                                                       *
 *             ￣￣￣                                                                         *
 * This code was generated by our own generator! In order to modify this, please run the     *
 * generator with whatever settings you want.                                                *
 *                                                                                           */

using Murder.Components;
using Murder.Components.Cutscenes;
using Murder.Editor.Components;
using Bang.Interactions;
using Murder.Components.Graphics;
using Bang.StateMachines;
using Bang.Components;
using Murder.StateMachines;
using Murder.Interactions;
using Murder.Messages;
using Road.Messages;
using System.Collections.Immutable;

namespace Bang.Entities
{
    public enum MurderComponentType
    {
        AdvancedCollision = 0,
        Agent = 1,
        AgentImpulse = 2,
        AgentSprite = 3,
        Alpha = 4,
        AnimationComplete = 5,
        AnimationOverload = 6,
        AnimationSpeedOverload = 7,
        Aseprite = 8,
        CameraFollow = 9,
        Carve = 10,
        Collider = 11,
        CustomDraw = 12,
        CutsceneAnchors = 13,
        DestroyAtTime = 14,
        DestroyOnAnimationComplete = 15,
        DestroyOnCollision = 16,
        DisableAgent = 17,
        DoNotPause = 18,
        DrawRectangle = 19,
        EntityTracker = 20,
        Facing = 21,
        FadeScreen = 22,
        FadeTransition = 23,
        FadeWhenInArea = 24,
        FlashSprite = 25,
        Friction = 26,
        GlobalShader = 27,
        GuidToIdTargetInteraction = 28,
        HAAStarPathfind = 29,
        HasVision = 30,
        HighlightSprite = 31,
        Indestructible = 32,
        InstanceToEntityLookup = 33,
        InteractOnButtonPress = 34,
        InteractOnCollision = 35,
        InteractOnRuleMatch = 36,
        InteractOnStart = 37,
        Interactor = 38,
        Line = 39,
        Map = 40,
        MapDimensions = 41,
        MoveTo = 42,
        Parallax = 43,
        Pathfind = 44,
        PauseAnimation = 45,
        PrefabRef = 46,
        PushAway = 47,
        Quadtree = 48,
        RectPosition = 49,
        RemoveColliderWhenStopped = 50,
        RequiresVision = 51,
        Rotate = 52,
        Route = 53,
        RuleWatcher = 54,
        Situation = 55,
        Speaker = 56,
        TargetInteraction = 57,
        TextBox = 58,
        Texture = 59,
        TileGrid = 60,
        Tileset = 61,
        Velocity = 62,
        VerticalPosition = 63,
        WaitForVacancy = 64,
        StateMachine = 65,
        Interactive = 66,
        Transform = 67,
        TransformBase = 67
    }

    public enum MurderMessageType
    {
        AnimationComplete = 68,
        CollidedWith = 69,
        Highlight = 70,
        Interact = 71,
        Interactor = 72,
        NextDialog = 73,
        PathNotPossible = 74
    }

    public static class MurderEntityExtensions
    {
        #region Component "Get" methods!
        public static AdvancedCollisionComponent GetAdvancedCollision(this Entity e)
        {
            return e.GetComponent<AdvancedCollisionComponent>(0);
        }

        public static AgentComponent GetAgent(this Entity e)
        {
            return e.GetComponent<AgentComponent>(1);
        }

        public static AgentImpulseComponent GetAgentImpulse(this Entity e)
        {
            return e.GetComponent<AgentImpulseComponent>(2);
        }

        public static AgentSpriteComponent GetAgentSprite(this Entity e)
        {
            return e.GetComponent<AgentSpriteComponent>(3);
        }

        public static AlphaComponent GetAlpha(this Entity e)
        {
            return e.GetComponent<AlphaComponent>(4);
        }

        public static AnimationCompleteComponent GetAnimationComplete(this Entity e)
        {
            return e.GetComponent<AnimationCompleteComponent>(5);
        }

        public static AnimationOverloadComponent GetAnimationOverload(this Entity e)
        {
            return e.GetComponent<AnimationOverloadComponent>(6);
        }

        public static AnimationSpeedOverload GetAnimationSpeedOverload(this Entity e)
        {
            return e.GetComponent<AnimationSpeedOverload>(7);
        }

        public static AsepriteComponent GetAseprite(this Entity e)
        {
            return e.GetComponent<AsepriteComponent>(8);
        }

        public static CameraFollowComponent GetCameraFollow(this Entity e)
        {
            return e.GetComponent<CameraFollowComponent>(9);
        }

        public static CarveComponent GetCarve(this Entity e)
        {
            return e.GetComponent<CarveComponent>(10);
        }

        public static ColliderComponent GetCollider(this Entity e)
        {
            return e.GetComponent<ColliderComponent>(11);
        }

        public static CustomDrawComponent GetCustomDraw(this Entity e)
        {
            return e.GetComponent<CustomDrawComponent>(12);
        }

        public static CutsceneAnchorsComponent GetCutsceneAnchors(this Entity e)
        {
            return e.GetComponent<CutsceneAnchorsComponent>(13);
        }

        public static DestroyAtTimeComponent GetDestroyAtTime(this Entity e)
        {
            return e.GetComponent<DestroyAtTimeComponent>(14);
        }

        public static DestroyOnAnimationCompleteComponent GetDestroyOnAnimationComplete(this Entity e)
        {
            return e.GetComponent<DestroyOnAnimationCompleteComponent>(15);
        }

        public static DestroyOnCollisionComponent GetDestroyOnCollision(this Entity e)
        {
            return e.GetComponent<DestroyOnCollisionComponent>(16);
        }

        public static DisableAgentComponent GetDisableAgent(this Entity e)
        {
            return e.GetComponent<DisableAgentComponent>(17);
        }

        public static DoNotPauseComponent GetDoNotPause(this Entity e)
        {
            return e.GetComponent<DoNotPauseComponent>(18);
        }

        public static DrawRectangleComponent GetDrawRectangle(this Entity e)
        {
            return e.GetComponent<DrawRectangleComponent>(19);
        }

        public static EntityTrackerComponent GetEntityTracker(this Entity e)
        {
            return e.GetComponent<EntityTrackerComponent>(20);
        }

        public static FacingComponent GetFacing(this Entity e)
        {
            return e.GetComponent<FacingComponent>(21);
        }

        public static FadeScreenComponent GetFadeScreen(this Entity e)
        {
            return e.GetComponent<FadeScreenComponent>(22);
        }

        public static FadeTransitionComponent GetFadeTransition(this Entity e)
        {
            return e.GetComponent<FadeTransitionComponent>(23);
        }

        public static FadeWhenInAreaComponent GetFadeWhenInArea(this Entity e)
        {
            return e.GetComponent<FadeWhenInAreaComponent>(24);
        }

        public static FlashSpriteComponent GetFlashSprite(this Entity e)
        {
            return e.GetComponent<FlashSpriteComponent>(25);
        }

        public static FrictionComponent GetFriction(this Entity e)
        {
            return e.GetComponent<FrictionComponent>(26);
        }

        public static GlobalShaderComponent GetGlobalShader(this Entity e)
        {
            return e.GetComponent<GlobalShaderComponent>(27);
        }

        public static GuidToIdTargetInteractionComponent GetGuidToIdTargetInteraction(this Entity e)
        {
            return e.GetComponent<GuidToIdTargetInteractionComponent>(28);
        }

        public static HAAStarPathfindComponent GetHAAStarPathfind(this Entity e)
        {
            return e.GetComponent<HAAStarPathfindComponent>(29);
        }

        public static HasVisionComponent GetHasVision(this Entity e)
        {
            return e.GetComponent<HasVisionComponent>(30);
        }

        public static HighlightSpriteComponent GetHighlightSprite(this Entity e)
        {
            return e.GetComponent<HighlightSpriteComponent>(31);
        }

        public static IndestructibleComponent GetIndestructible(this Entity e)
        {
            return e.GetComponent<IndestructibleComponent>(32);
        }

        public static InstanceToEntityLookupComponent GetInstanceToEntityLookup(this Entity e)
        {
            return e.GetComponent<InstanceToEntityLookupComponent>(33);
        }

        public static InteractOnButtonPressComponent GetInteractOnButtonPress(this Entity e)
        {
            return e.GetComponent<InteractOnButtonPressComponent>(34);
        }

        public static InteractOnCollisionComponent GetInteractOnCollision(this Entity e)
        {
            return e.GetComponent<InteractOnCollisionComponent>(35);
        }

        public static InteractOnRuleMatchComponent GetInteractOnRuleMatch(this Entity e)
        {
            return e.GetComponent<InteractOnRuleMatchComponent>(36);
        }

        public static InteractOnStartComponent GetInteractOnStart(this Entity e)
        {
            return e.GetComponent<InteractOnStartComponent>(37);
        }

        public static InteractorComponent GetInteractor(this Entity e)
        {
            return e.GetComponent<InteractorComponent>(38);
        }

        public static LineComponent GetLine(this Entity e)
        {
            return e.GetComponent<LineComponent>(39);
        }

        public static MapComponent GetMap(this Entity e)
        {
            return e.GetComponent<MapComponent>(40);
        }

        public static MapDimensionsComponent GetMapDimensions(this Entity e)
        {
            return e.GetComponent<MapDimensionsComponent>(41);
        }

        public static MoveToComponent GetMoveTo(this Entity e)
        {
            return e.GetComponent<MoveToComponent>(42);
        }

        public static ParallaxComponent GetParallax(this Entity e)
        {
            return e.GetComponent<ParallaxComponent>(43);
        }

        public static PathfindComponent GetPathfind(this Entity e)
        {
            return e.GetComponent<PathfindComponent>(44);
        }

        public static PauseAnimationComponent GetPauseAnimation(this Entity e)
        {
            return e.GetComponent<PauseAnimationComponent>(45);
        }

        public static PrefabRefComponent GetPrefabRef(this Entity e)
        {
            return e.GetComponent<PrefabRefComponent>(46);
        }

        public static PushAwayComponent GetPushAway(this Entity e)
        {
            return e.GetComponent<PushAwayComponent>(47);
        }

        public static QuadtreeComponent GetQuadtree(this Entity e)
        {
            return e.GetComponent<QuadtreeComponent>(48);
        }

        public static RectPositionComponent GetRectPosition(this Entity e)
        {
            return e.GetComponent<RectPositionComponent>(49);
        }

        public static RemoveColliderWhenStoppedComponent GetRemoveColliderWhenStopped(this Entity e)
        {
            return e.GetComponent<RemoveColliderWhenStoppedComponent>(50);
        }

        public static RequiresVisionComponent GetRequiresVision(this Entity e)
        {
            return e.GetComponent<RequiresVisionComponent>(51);
        }

        public static RotateComponent GetRotate(this Entity e)
        {
            return e.GetComponent<RotateComponent>(52);
        }

        public static RouteComponent GetRoute(this Entity e)
        {
            return e.GetComponent<RouteComponent>(53);
        }

        public static RuleWatcherComponent GetRuleWatcher(this Entity e)
        {
            return e.GetComponent<RuleWatcherComponent>(54);
        }

        public static SituationComponent GetSituation(this Entity e)
        {
            return e.GetComponent<SituationComponent>(55);
        }

        public static SpeakerComponent GetSpeaker(this Entity e)
        {
            return e.GetComponent<SpeakerComponent>(56);
        }

        public static TargetInteractionComponent GetTargetInteraction(this Entity e)
        {
            return e.GetComponent<TargetInteractionComponent>(57);
        }

        public static TextBoxComponent GetTextBox(this Entity e)
        {
            return e.GetComponent<TextBoxComponent>(58);
        }

        public static TextureComponent GetTexture(this Entity e)
        {
            return e.GetComponent<TextureComponent>(59);
        }

        public static TileGridComponent GetTileGrid(this Entity e)
        {
            return e.GetComponent<TileGridComponent>(60);
        }

        public static TilesetComponent GetTileset(this Entity e)
        {
            return e.GetComponent<TilesetComponent>(61);
        }

        public static VelocityComponent GetVelocity(this Entity e)
        {
            return e.GetComponent<VelocityComponent>(62);
        }

        public static VerticalPositionComponent GetVerticalPosition(this Entity e)
        {
            return e.GetComponent<VerticalPositionComponent>(63);
        }

        public static WaitForVacancyComponent GetWaitForVacancy(this Entity e)
        {
            return e.GetComponent<WaitForVacancyComponent>(64);
        }

        public static IStateMachineComponent GetStateMachine(this Entity e)
        {
            return e.GetComponent<IStateMachineComponent>(65);
        }

        public static IInteractiveComponent GetInteractive(this Entity e)
        {
            return e.GetComponent<IInteractiveComponent>(66);
        }

        public static IMurderTransformComponent GetTransform(this Entity e)
        {
            return e.GetComponent<IMurderTransformComponent>(67);
        }

        public static ITransformComponent GetTransformBase(this Entity e)
        {
            return e.GetComponent<ITransformComponent>(67);
        }

        #endregion
        
        #region Component "Has" checkers!
        public static bool HasAdvancedCollision(this Entity e)
        {
            return e.HasComponent(0);
        }

        public static bool HasAgent(this Entity e)
        {
            return e.HasComponent(1);
        }

        public static bool HasAgentImpulse(this Entity e)
        {
            return e.HasComponent(2);
        }

        public static bool HasAgentSprite(this Entity e)
        {
            return e.HasComponent(3);
        }

        public static bool HasAlpha(this Entity e)
        {
            return e.HasComponent(4);
        }

        public static bool HasAnimationComplete(this Entity e)
        {
            return e.HasComponent(5);
        }

        public static bool HasAnimationOverload(this Entity e)
        {
            return e.HasComponent(6);
        }

        public static bool HasAnimationSpeedOverload(this Entity e)
        {
            return e.HasComponent(7);
        }

        public static bool HasAseprite(this Entity e)
        {
            return e.HasComponent(8);
        }

        public static bool HasCameraFollow(this Entity e)
        {
            return e.HasComponent(9);
        }

        public static bool HasCarve(this Entity e)
        {
            return e.HasComponent(10);
        }

        public static bool HasCollider(this Entity e)
        {
            return e.HasComponent(11);
        }

        public static bool HasCustomDraw(this Entity e)
        {
            return e.HasComponent(12);
        }

        public static bool HasCutsceneAnchors(this Entity e)
        {
            return e.HasComponent(13);
        }

        public static bool HasDestroyAtTime(this Entity e)
        {
            return e.HasComponent(14);
        }

        public static bool HasDestroyOnAnimationComplete(this Entity e)
        {
            return e.HasComponent(15);
        }

        public static bool HasDestroyOnCollision(this Entity e)
        {
            return e.HasComponent(16);
        }

        public static bool HasDisableAgent(this Entity e)
        {
            return e.HasComponent(17);
        }

        public static bool HasDoNotPause(this Entity e)
        {
            return e.HasComponent(18);
        }

        public static bool HasDrawRectangle(this Entity e)
        {
            return e.HasComponent(19);
        }

        public static bool HasEntityTracker(this Entity e)
        {
            return e.HasComponent(20);
        }

        public static bool HasFacing(this Entity e)
        {
            return e.HasComponent(21);
        }

        public static bool HasFadeScreen(this Entity e)
        {
            return e.HasComponent(22);
        }

        public static bool HasFadeTransition(this Entity e)
        {
            return e.HasComponent(23);
        }

        public static bool HasFadeWhenInArea(this Entity e)
        {
            return e.HasComponent(24);
        }

        public static bool HasFlashSprite(this Entity e)
        {
            return e.HasComponent(25);
        }

        public static bool HasFriction(this Entity e)
        {
            return e.HasComponent(26);
        }

        public static bool HasGlobalShader(this Entity e)
        {
            return e.HasComponent(27);
        }

        public static bool HasGuidToIdTargetInteraction(this Entity e)
        {
            return e.HasComponent(28);
        }

        public static bool HasHAAStarPathfind(this Entity e)
        {
            return e.HasComponent(29);
        }

        public static bool HasHasVision(this Entity e)
        {
            return e.HasComponent(30);
        }

        public static bool HasHighlightSprite(this Entity e)
        {
            return e.HasComponent(31);
        }

        public static bool HasIndestructible(this Entity e)
        {
            return e.HasComponent(32);
        }

        public static bool HasInstanceToEntityLookup(this Entity e)
        {
            return e.HasComponent(33);
        }

        public static bool HasInteractOnButtonPress(this Entity e)
        {
            return e.HasComponent(34);
        }

        public static bool HasInteractOnCollision(this Entity e)
        {
            return e.HasComponent(35);
        }

        public static bool HasInteractOnRuleMatch(this Entity e)
        {
            return e.HasComponent(36);
        }

        public static bool HasInteractOnStart(this Entity e)
        {
            return e.HasComponent(37);
        }

        public static bool HasInteractor(this Entity e)
        {
            return e.HasComponent(38);
        }

        public static bool HasLine(this Entity e)
        {
            return e.HasComponent(39);
        }

        public static bool HasMap(this Entity e)
        {
            return e.HasComponent(40);
        }

        public static bool HasMapDimensions(this Entity e)
        {
            return e.HasComponent(41);
        }

        public static bool HasMoveTo(this Entity e)
        {
            return e.HasComponent(42);
        }

        public static bool HasParallax(this Entity e)
        {
            return e.HasComponent(43);
        }

        public static bool HasPathfind(this Entity e)
        {
            return e.HasComponent(44);
        }

        public static bool HasPauseAnimation(this Entity e)
        {
            return e.HasComponent(45);
        }

        public static bool HasPrefabRef(this Entity e)
        {
            return e.HasComponent(46);
        }

        public static bool HasPushAway(this Entity e)
        {
            return e.HasComponent(47);
        }

        public static bool HasQuadtree(this Entity e)
        {
            return e.HasComponent(48);
        }

        public static bool HasRectPosition(this Entity e)
        {
            return e.HasComponent(49);
        }

        public static bool HasRemoveColliderWhenStopped(this Entity e)
        {
            return e.HasComponent(50);
        }

        public static bool HasRequiresVision(this Entity e)
        {
            return e.HasComponent(51);
        }

        public static bool HasRotate(this Entity e)
        {
            return e.HasComponent(52);
        }

        public static bool HasRoute(this Entity e)
        {
            return e.HasComponent(53);
        }

        public static bool HasRuleWatcher(this Entity e)
        {
            return e.HasComponent(54);
        }

        public static bool HasSituation(this Entity e)
        {
            return e.HasComponent(55);
        }

        public static bool HasSpeaker(this Entity e)
        {
            return e.HasComponent(56);
        }

        public static bool HasTargetInteraction(this Entity e)
        {
            return e.HasComponent(57);
        }

        public static bool HasTextBox(this Entity e)
        {
            return e.HasComponent(58);
        }

        public static bool HasTexture(this Entity e)
        {
            return e.HasComponent(59);
        }

        public static bool HasTileGrid(this Entity e)
        {
            return e.HasComponent(60);
        }

        public static bool HasTileset(this Entity e)
        {
            return e.HasComponent(61);
        }

        public static bool HasVelocity(this Entity e)
        {
            return e.HasComponent(62);
        }

        public static bool HasVerticalPosition(this Entity e)
        {
            return e.HasComponent(63);
        }

        public static bool HasWaitForVacancy(this Entity e)
        {
            return e.HasComponent(64);
        }

        public static bool HasStateMachine(this Entity e)
        {
            return e.HasComponent(65);
        }

        public static bool HasInteractive(this Entity e)
        {
            return e.HasComponent(66);
        }

        public static bool HasTransform(this Entity e)
        {
            return e.HasComponent(67);
        }

        public static bool HasTransformBase(this Entity e)
        {
            return e.HasComponent(67);
        }

        #endregion
        
        #region Component "TryGet" methods!
        public static AdvancedCollisionComponent? TryGetAdvancedCollision(this Entity e)
        {
            if (!e.HasAdvancedCollision())
            {
                return null;
            }

            return e.GetAdvancedCollision();
        }

        public static AgentComponent? TryGetAgent(this Entity e)
        {
            if (!e.HasAgent())
            {
                return null;
            }

            return e.GetAgent();
        }

        public static AgentImpulseComponent? TryGetAgentImpulse(this Entity e)
        {
            if (!e.HasAgentImpulse())
            {
                return null;
            }

            return e.GetAgentImpulse();
        }

        public static AgentSpriteComponent? TryGetAgentSprite(this Entity e)
        {
            if (!e.HasAgentSprite())
            {
                return null;
            }

            return e.GetAgentSprite();
        }

        public static AlphaComponent? TryGetAlpha(this Entity e)
        {
            if (!e.HasAlpha())
            {
                return null;
            }

            return e.GetAlpha();
        }

        public static AnimationCompleteComponent? TryGetAnimationComplete(this Entity e)
        {
            if (!e.HasAnimationComplete())
            {
                return null;
            }

            return e.GetAnimationComplete();
        }

        public static AnimationOverloadComponent? TryGetAnimationOverload(this Entity e)
        {
            if (!e.HasAnimationOverload())
            {
                return null;
            }

            return e.GetAnimationOverload();
        }

        public static AnimationSpeedOverload? TryGetAnimationSpeedOverload(this Entity e)
        {
            if (!e.HasAnimationSpeedOverload())
            {
                return null;
            }

            return e.GetAnimationSpeedOverload();
        }

        public static AsepriteComponent? TryGetAseprite(this Entity e)
        {
            if (!e.HasAseprite())
            {
                return null;
            }

            return e.GetAseprite();
        }

        public static CameraFollowComponent? TryGetCameraFollow(this Entity e)
        {
            if (!e.HasCameraFollow())
            {
                return null;
            }

            return e.GetCameraFollow();
        }

        public static CarveComponent? TryGetCarve(this Entity e)
        {
            if (!e.HasCarve())
            {
                return null;
            }

            return e.GetCarve();
        }

        public static ColliderComponent? TryGetCollider(this Entity e)
        {
            if (!e.HasCollider())
            {
                return null;
            }

            return e.GetCollider();
        }

        public static CustomDrawComponent? TryGetCustomDraw(this Entity e)
        {
            if (!e.HasCustomDraw())
            {
                return null;
            }

            return e.GetCustomDraw();
        }

        public static CutsceneAnchorsComponent? TryGetCutsceneAnchors(this Entity e)
        {
            if (!e.HasCutsceneAnchors())
            {
                return null;
            }

            return e.GetCutsceneAnchors();
        }

        public static DestroyAtTimeComponent? TryGetDestroyAtTime(this Entity e)
        {
            if (!e.HasDestroyAtTime())
            {
                return null;
            }

            return e.GetDestroyAtTime();
        }

        public static DestroyOnAnimationCompleteComponent? TryGetDestroyOnAnimationComplete(this Entity e)
        {
            if (!e.HasDestroyOnAnimationComplete())
            {
                return null;
            }

            return e.GetDestroyOnAnimationComplete();
        }

        public static DestroyOnCollisionComponent? TryGetDestroyOnCollision(this Entity e)
        {
            if (!e.HasDestroyOnCollision())
            {
                return null;
            }

            return e.GetDestroyOnCollision();
        }

        public static DisableAgentComponent? TryGetDisableAgent(this Entity e)
        {
            if (!e.HasDisableAgent())
            {
                return null;
            }

            return e.GetDisableAgent();
        }

        public static DoNotPauseComponent? TryGetDoNotPause(this Entity e)
        {
            if (!e.HasDoNotPause())
            {
                return null;
            }

            return e.GetDoNotPause();
        }

        public static DrawRectangleComponent? TryGetDrawRectangle(this Entity e)
        {
            if (!e.HasDrawRectangle())
            {
                return null;
            }

            return e.GetDrawRectangle();
        }

        public static EntityTrackerComponent? TryGetEntityTracker(this Entity e)
        {
            if (!e.HasEntityTracker())
            {
                return null;
            }

            return e.GetEntityTracker();
        }

        public static FacingComponent? TryGetFacing(this Entity e)
        {
            if (!e.HasFacing())
            {
                return null;
            }

            return e.GetFacing();
        }

        public static FadeScreenComponent? TryGetFadeScreen(this Entity e)
        {
            if (!e.HasFadeScreen())
            {
                return null;
            }

            return e.GetFadeScreen();
        }

        public static FadeTransitionComponent? TryGetFadeTransition(this Entity e)
        {
            if (!e.HasFadeTransition())
            {
                return null;
            }

            return e.GetFadeTransition();
        }

        public static FadeWhenInAreaComponent? TryGetFadeWhenInArea(this Entity e)
        {
            if (!e.HasFadeWhenInArea())
            {
                return null;
            }

            return e.GetFadeWhenInArea();
        }

        public static FlashSpriteComponent? TryGetFlashSprite(this Entity e)
        {
            if (!e.HasFlashSprite())
            {
                return null;
            }

            return e.GetFlashSprite();
        }

        public static FrictionComponent? TryGetFriction(this Entity e)
        {
            if (!e.HasFriction())
            {
                return null;
            }

            return e.GetFriction();
        }

        public static GlobalShaderComponent? TryGetGlobalShader(this Entity e)
        {
            if (!e.HasGlobalShader())
            {
                return null;
            }

            return e.GetGlobalShader();
        }

        public static GuidToIdTargetInteractionComponent? TryGetGuidToIdTargetInteraction(this Entity e)
        {
            if (!e.HasGuidToIdTargetInteraction())
            {
                return null;
            }

            return e.GetGuidToIdTargetInteraction();
        }

        public static HAAStarPathfindComponent? TryGetHAAStarPathfind(this Entity e)
        {
            if (!e.HasHAAStarPathfind())
            {
                return null;
            }

            return e.GetHAAStarPathfind();
        }

        public static HasVisionComponent? TryGetHasVision(this Entity e)
        {
            if (!e.HasHasVision())
            {
                return null;
            }

            return e.GetHasVision();
        }

        public static HighlightSpriteComponent? TryGetHighlightSprite(this Entity e)
        {
            if (!e.HasHighlightSprite())
            {
                return null;
            }

            return e.GetHighlightSprite();
        }

        public static IndestructibleComponent? TryGetIndestructible(this Entity e)
        {
            if (!e.HasIndestructible())
            {
                return null;
            }

            return e.GetIndestructible();
        }

        public static InstanceToEntityLookupComponent? TryGetInstanceToEntityLookup(this Entity e)
        {
            if (!e.HasInstanceToEntityLookup())
            {
                return null;
            }

            return e.GetInstanceToEntityLookup();
        }

        public static InteractOnButtonPressComponent? TryGetInteractOnButtonPress(this Entity e)
        {
            if (!e.HasInteractOnButtonPress())
            {
                return null;
            }

            return e.GetInteractOnButtonPress();
        }

        public static InteractOnCollisionComponent? TryGetInteractOnCollision(this Entity e)
        {
            if (!e.HasInteractOnCollision())
            {
                return null;
            }

            return e.GetInteractOnCollision();
        }

        public static InteractOnRuleMatchComponent? TryGetInteractOnRuleMatch(this Entity e)
        {
            if (!e.HasInteractOnRuleMatch())
            {
                return null;
            }

            return e.GetInteractOnRuleMatch();
        }

        public static InteractOnStartComponent? TryGetInteractOnStart(this Entity e)
        {
            if (!e.HasInteractOnStart())
            {
                return null;
            }

            return e.GetInteractOnStart();
        }

        public static InteractorComponent? TryGetInteractor(this Entity e)
        {
            if (!e.HasInteractor())
            {
                return null;
            }

            return e.GetInteractor();
        }

        public static LineComponent? TryGetLine(this Entity e)
        {
            if (!e.HasLine())
            {
                return null;
            }

            return e.GetLine();
        }

        public static MapComponent? TryGetMap(this Entity e)
        {
            if (!e.HasMap())
            {
                return null;
            }

            return e.GetMap();
        }

        public static MapDimensionsComponent? TryGetMapDimensions(this Entity e)
        {
            if (!e.HasMapDimensions())
            {
                return null;
            }

            return e.GetMapDimensions();
        }

        public static MoveToComponent? TryGetMoveTo(this Entity e)
        {
            if (!e.HasMoveTo())
            {
                return null;
            }

            return e.GetMoveTo();
        }

        public static ParallaxComponent? TryGetParallax(this Entity e)
        {
            if (!e.HasParallax())
            {
                return null;
            }

            return e.GetParallax();
        }

        public static PathfindComponent? TryGetPathfind(this Entity e)
        {
            if (!e.HasPathfind())
            {
                return null;
            }

            return e.GetPathfind();
        }

        public static PauseAnimationComponent? TryGetPauseAnimation(this Entity e)
        {
            if (!e.HasPauseAnimation())
            {
                return null;
            }

            return e.GetPauseAnimation();
        }

        public static PrefabRefComponent? TryGetPrefabRef(this Entity e)
        {
            if (!e.HasPrefabRef())
            {
                return null;
            }

            return e.GetPrefabRef();
        }

        public static PushAwayComponent? TryGetPushAway(this Entity e)
        {
            if (!e.HasPushAway())
            {
                return null;
            }

            return e.GetPushAway();
        }

        public static QuadtreeComponent? TryGetQuadtree(this Entity e)
        {
            if (!e.HasQuadtree())
            {
                return null;
            }

            return e.GetQuadtree();
        }

        public static RectPositionComponent? TryGetRectPosition(this Entity e)
        {
            if (!e.HasRectPosition())
            {
                return null;
            }

            return e.GetRectPosition();
        }

        public static RemoveColliderWhenStoppedComponent? TryGetRemoveColliderWhenStopped(this Entity e)
        {
            if (!e.HasRemoveColliderWhenStopped())
            {
                return null;
            }

            return e.GetRemoveColliderWhenStopped();
        }

        public static RequiresVisionComponent? TryGetRequiresVision(this Entity e)
        {
            if (!e.HasRequiresVision())
            {
                return null;
            }

            return e.GetRequiresVision();
        }

        public static RotateComponent? TryGetRotate(this Entity e)
        {
            if (!e.HasRotate())
            {
                return null;
            }

            return e.GetRotate();
        }

        public static RouteComponent? TryGetRoute(this Entity e)
        {
            if (!e.HasRoute())
            {
                return null;
            }

            return e.GetRoute();
        }

        public static RuleWatcherComponent? TryGetRuleWatcher(this Entity e)
        {
            if (!e.HasRuleWatcher())
            {
                return null;
            }

            return e.GetRuleWatcher();
        }

        public static SituationComponent? TryGetSituation(this Entity e)
        {
            if (!e.HasSituation())
            {
                return null;
            }

            return e.GetSituation();
        }

        public static SpeakerComponent? TryGetSpeaker(this Entity e)
        {
            if (!e.HasSpeaker())
            {
                return null;
            }

            return e.GetSpeaker();
        }

        public static TargetInteractionComponent? TryGetTargetInteraction(this Entity e)
        {
            if (!e.HasTargetInteraction())
            {
                return null;
            }

            return e.GetTargetInteraction();
        }

        public static TextBoxComponent? TryGetTextBox(this Entity e)
        {
            if (!e.HasTextBox())
            {
                return null;
            }

            return e.GetTextBox();
        }

        public static TextureComponent? TryGetTexture(this Entity e)
        {
            if (!e.HasTexture())
            {
                return null;
            }

            return e.GetTexture();
        }

        public static TileGridComponent? TryGetTileGrid(this Entity e)
        {
            if (!e.HasTileGrid())
            {
                return null;
            }

            return e.GetTileGrid();
        }

        public static TilesetComponent? TryGetTileset(this Entity e)
        {
            if (!e.HasTileset())
            {
                return null;
            }

            return e.GetTileset();
        }

        public static VelocityComponent? TryGetVelocity(this Entity e)
        {
            if (!e.HasVelocity())
            {
                return null;
            }

            return e.GetVelocity();
        }

        public static VerticalPositionComponent? TryGetVerticalPosition(this Entity e)
        {
            if (!e.HasVerticalPosition())
            {
                return null;
            }

            return e.GetVerticalPosition();
        }

        public static WaitForVacancyComponent? TryGetWaitForVacancy(this Entity e)
        {
            if (!e.HasWaitForVacancy())
            {
                return null;
            }

            return e.GetWaitForVacancy();
        }

        public static IStateMachineComponent? TryGetStateMachine(this Entity e)
        {
            if (!e.HasStateMachine())
            {
                return null;
            }

            return e.GetStateMachine();
        }

        public static IInteractiveComponent? TryGetInteractive(this Entity e)
        {
            if (!e.HasInteractive())
            {
                return null;
            }

            return e.GetInteractive();
        }

        public static IMurderTransformComponent? TryGetTransform(this Entity e)
        {
            if (!e.HasTransform())
            {
                return null;
            }

            return e.GetTransform();
        }

        public static ITransformComponent? TryGetTransformBase(this Entity e)
        {
            if (!e.HasTransformBase())
            {
                return null;
            }

            return e.GetTransformBase();
        }

        #endregion
        
        #region Component "Set" methods!
        public static void SetAdvancedCollision(this Entity e, AdvancedCollisionComponent component)
        {
            e.AddOrReplaceComponent(component, 0);
        }

        public static void SetAgent(this Entity e, AgentComponent component)
        {
            e.AddOrReplaceComponent(component, 1);
        }

        public static void SetAgent(this Entity e, System.Single speed, System.Single acceleration, System.Single friction)
        {
            e.AddOrReplaceComponent(new AgentComponent(speed, acceleration, friction), 1);
        }

        public static void SetAgentImpulse(this Entity e, AgentImpulseComponent component)
        {
            e.AddOrReplaceComponent(component, 2);
        }

        public static void SetAgentImpulse(this Entity e, Murder.Core.Geometry.Vector2 impulse)
        {
            e.AddOrReplaceComponent(new AgentImpulseComponent(impulse), 2);
        }

        public static void SetAgentSprite(this Entity e, AgentSpriteComponent component)
        {
            e.AddOrReplaceComponent(component, 3);
        }

        public static void SetAgentSprite(this Entity e)
        {
            e.AddOrReplaceComponent(new AgentSpriteComponent(), 3);
        }

        public static void SetAlpha(this Entity e, AlphaComponent component)
        {
            e.AddOrReplaceComponent(component, 4);
        }

        public static void SetAlpha(this Entity e)
        {
            e.AddOrReplaceComponent(new AlphaComponent(), 4);
        }

        public static void SetAlpha(this Entity e, System.Single[] sources)
        {
            e.AddOrReplaceComponent(new AlphaComponent(sources), 4);
        }

        public static void SetAlpha(this Entity e, Murder.Components.AlphaSources source, System.Single amount)
        {
            e.AddOrReplaceComponent(new AlphaComponent(source, amount), 4);
        }

        public static void SetAnimationComplete(this Entity e, AnimationCompleteComponent component)
        {
            e.AddOrReplaceComponent(component, 5);
        }

        public static void SetAnimationComplete(this Entity e)
        {
            e.AddOrReplaceComponent(new AnimationCompleteComponent(), 5);
        }

        public static void SetAnimationOverload(this Entity e, AnimationOverloadComponent component)
        {
            e.AddOrReplaceComponent(component, 6);
        }

        public static void SetAnimationOverload(this Entity e, System.String animationId, System.Boolean loop)
        {
            e.AddOrReplaceComponent(new AnimationOverloadComponent(animationId, loop), 6);
        }

        public static void SetAnimationOverload(this Entity e, System.String animationId, System.Single duration, System.Boolean loop)
        {
            e.AddOrReplaceComponent(new AnimationOverloadComponent(animationId, duration, loop), 6);
        }

        public static void SetAnimationOverload(this Entity e, System.Boolean loop, System.String[] animationId)
        {
            e.AddOrReplaceComponent(new AnimationOverloadComponent(loop, animationId), 6);
        }

        public static void SetAnimationOverload(this Entity e, System.Boolean loop, System.String[] animationId, System.Int32 current)
        {
            e.AddOrReplaceComponent(new AnimationOverloadComponent(loop, animationId, current), 6);
        }

        public static void SetAnimationSpeedOverload(this Entity e, AnimationSpeedOverload component)
        {
            e.AddOrReplaceComponent(component, 7);
        }

        public static void SetAnimationSpeedOverload(this Entity e, System.Single rate, System.Boolean persist)
        {
            e.AddOrReplaceComponent(new AnimationSpeedOverload(rate, persist), 7);
        }

        public static void SetAseprite(this Entity e, AsepriteComponent component)
        {
            e.AddOrReplaceComponent(component, 8);
        }

        public static void SetAseprite(this Entity e)
        {
            e.AddOrReplaceComponent(new AsepriteComponent(), 8);
        }

        public static void SetAseprite(this Entity e, System.Guid guid, Murder.Core.Geometry.Vector2 offset, System.String id, System.Int32 ySortOffset, System.Boolean backAnim, System.Boolean flip, System.Single startTime, Murder.Core.Graphics.TargetSpriteBatches targetSpriteBatch)
        {
            e.AddOrReplaceComponent(new AsepriteComponent(guid, offset, id, ySortOffset, backAnim, flip, startTime, targetSpriteBatch), 8);
        }

        public static void SetAseprite(this Entity e, System.Guid guid, Murder.Core.Geometry.Vector2 offset, System.Collections.Immutable.ImmutableArray<System.String> id, System.Int32 ySortOffset, System.Boolean rotate, System.Boolean flip, System.Single startTime, Murder.Core.Graphics.TargetSpriteBatches targetSpriteBatch)
        {
            e.AddOrReplaceComponent(new AsepriteComponent(guid, offset, id, ySortOffset, rotate, flip, startTime, targetSpriteBatch), 8);
        }

        public static void SetCameraFollow(this Entity e, CameraFollowComponent component)
        {
            e.AddOrReplaceComponent(component, 9);
        }

        public static void SetCameraFollow(this Entity e)
        {
            e.AddOrReplaceComponent(new CameraFollowComponent(), 9);
        }

        public static void SetCameraFollow(this Entity e, System.Boolean enabled)
        {
            e.AddOrReplaceComponent(new CameraFollowComponent(enabled), 9);
        }

        public static void SetCarve(this Entity e, CarveComponent component)
        {
            e.AddOrReplaceComponent(component, 10);
        }

        public static void SetCarve(this Entity e)
        {
            e.AddOrReplaceComponent(new CarveComponent(), 10);
        }

        public static void SetCollider(this Entity e, ColliderComponent component)
        {
            e.AddOrReplaceComponent(component, 11);
        }

        public static void SetCollider(this Entity e)
        {
            e.AddOrReplaceComponent(new ColliderComponent(), 11);
        }

        public static void SetCollider(this Entity e, System.Collections.Immutable.ImmutableArray<Murder.Core.Geometry.IShape> shapes, System.Int32 layer, Murder.Core.Graphics.Color color)
        {
            e.AddOrReplaceComponent(new ColliderComponent(shapes, layer, color), 11);
        }

        public static void SetCustomDraw(this Entity e, CustomDrawComponent component)
        {
            e.AddOrReplaceComponent(component, 12);
        }

        public static void SetCustomDraw(this Entity e, System.Action<Murder.Core.Graphics.RenderContext> draw)
        {
            e.AddOrReplaceComponent(new CustomDrawComponent(draw), 12);
        }

        public static void SetCutsceneAnchors(this Entity e, CutsceneAnchorsComponent component)
        {
            e.AddOrReplaceComponent(component, 13);
        }

        public static void SetCutsceneAnchors(this Entity e)
        {
            e.AddOrReplaceComponent(new CutsceneAnchorsComponent(), 13);
        }

        public static void SetCutsceneAnchors(this Entity e, System.Collections.Immutable.ImmutableDictionary<System.String, Murder.Core.Cutscenes.Anchor> anchors)
        {
            e.AddOrReplaceComponent(new CutsceneAnchorsComponent(anchors), 13);
        }

        public static void SetDestroyAtTime(this Entity e, DestroyAtTimeComponent component)
        {
            e.AddOrReplaceComponent(component, 14);
        }

        public static void SetDestroyAtTime(this Entity e)
        {
            e.AddOrReplaceComponent(new DestroyAtTimeComponent(), 14);
        }

        public static void SetDestroyAtTime(this Entity e, System.Single timeToDestroy)
        {
            e.AddOrReplaceComponent(new DestroyAtTimeComponent(timeToDestroy), 14);
        }

        public static void SetDestroyOnAnimationComplete(this Entity e, DestroyOnAnimationCompleteComponent component)
        {
            e.AddOrReplaceComponent(component, 15);
        }

        public static void SetDestroyOnCollision(this Entity e, DestroyOnCollisionComponent component)
        {
            e.AddOrReplaceComponent(component, 16);
        }

        public static void SetDisableAgent(this Entity e, DisableAgentComponent component)
        {
            e.AddOrReplaceComponent(component, 17);
        }

        public static void SetDisableAgent(this Entity e)
        {
            e.AddOrReplaceComponent(new DisableAgentComponent(), 17);
        }

        public static void SetDoNotPause(this Entity e, DoNotPauseComponent component)
        {
            e.AddOrReplaceComponent(component, 18);
        }

        public static void SetDrawRectangle(this Entity e, DrawRectangleComponent component)
        {
            e.AddOrReplaceComponent(component, 19);
        }

        public static void SetDrawRectangle(this Entity e)
        {
            e.AddOrReplaceComponent(new DrawRectangleComponent(), 19);
        }

        public static void SetEntityTracker(this Entity e, EntityTrackerComponent component)
        {
            e.AddOrReplaceComponent(component, 20);
        }

        public static void SetEntityTracker(this Entity e, System.Int32 target)
        {
            e.AddOrReplaceComponent(new EntityTrackerComponent(target), 20);
        }

        public static void SetFacing(this Entity e, FacingComponent component)
        {
            e.AddOrReplaceComponent(component, 21);
        }

        public static void SetFacing(this Entity e, Murder.Helpers.Direction direction)
        {
            e.AddOrReplaceComponent(new FacingComponent(direction), 21);
        }

        public static void SetFadeScreen(this Entity e, FadeScreenComponent component)
        {
            e.AddOrReplaceComponent(component, 22);
        }

        public static void SetFadeScreen(this Entity e, Murder.Components.FadeType fade, System.Single startedTime, System.Single duration, Murder.Core.Graphics.Color color, System.Boolean destroyAfterFinished)
        {
            e.AddOrReplaceComponent(new FadeScreenComponent(fade, startedTime, duration, color, destroyAfterFinished), 22);
        }

        public static void SetFadeTransition(this Entity e, FadeTransitionComponent component)
        {
            e.AddOrReplaceComponent(component, 23);
        }

        public static void SetFadeTransition(this Entity e, System.Single duration, System.Single startAlpha, System.Single targetAlpha)
        {
            e.AddOrReplaceComponent(new FadeTransitionComponent(duration, startAlpha, targetAlpha), 23);
        }

        public static void SetFadeTransition(this Entity e, System.Single duration, System.Single startAlpha, System.Single targetAlpha, System.Boolean destroyOnEnd)
        {
            e.AddOrReplaceComponent(new FadeTransitionComponent(duration, startAlpha, targetAlpha, destroyOnEnd), 23);
        }

        public static void SetFadeWhenInArea(this Entity e, FadeWhenInAreaComponent component)
        {
            e.AddOrReplaceComponent(component, 24);
        }

        public static void SetFadeWhenInArea(this Entity e)
        {
            e.AddOrReplaceComponent(new FadeWhenInAreaComponent(), 24);
        }

        public static void SetFlashSprite(this Entity e, FlashSpriteComponent component)
        {
            e.AddOrReplaceComponent(component, 25);
        }

        public static void SetFlashSprite(this Entity e, System.Single destroyTimer)
        {
            e.AddOrReplaceComponent(new FlashSpriteComponent(destroyTimer), 25);
        }

        public static void SetFriction(this Entity e, FrictionComponent component)
        {
            e.AddOrReplaceComponent(component, 26);
        }

        public static void SetFriction(this Entity e, System.Single amount)
        {
            e.AddOrReplaceComponent(new FrictionComponent(amount), 26);
        }

        public static void SetGlobalShader(this Entity e, GlobalShaderComponent component)
        {
            e.AddOrReplaceComponent(component, 27);
        }

        public static void SetGlobalShader(this Entity e)
        {
            e.AddOrReplaceComponent(new GlobalShaderComponent(), 27);
        }

        public static void SetGuidToIdTargetInteraction(this Entity e, GuidToIdTargetInteractionComponent component)
        {
            e.AddOrReplaceComponent(component, 28);
        }

        public static void SetGuidToIdTargetInteraction(this Entity e, System.Guid target)
        {
            e.AddOrReplaceComponent(new GuidToIdTargetInteractionComponent(target), 28);
        }

        public static void SetHAAStarPathfind(this Entity e, HAAStarPathfindComponent component)
        {
            e.AddOrReplaceComponent(component, 29);
        }

        public static void SetHAAStarPathfind(this Entity e, System.Int32 width, System.Int32 height)
        {
            e.AddOrReplaceComponent(new HAAStarPathfindComponent(width, height), 29);
        }

        public static void SetHasVision(this Entity e, HasVisionComponent component)
        {
            e.AddOrReplaceComponent(component, 30);
        }

        public static void SetHasVision(this Entity e)
        {
            e.AddOrReplaceComponent(new HasVisionComponent(), 30);
        }

        public static void SetHighlightSprite(this Entity e, HighlightSpriteComponent component)
        {
            e.AddOrReplaceComponent(component, 31);
        }

        public static void SetIndestructible(this Entity e, IndestructibleComponent component)
        {
            e.AddOrReplaceComponent(component, 32);
        }

        public static void SetInstanceToEntityLookup(this Entity e, InstanceToEntityLookupComponent component)
        {
            e.AddOrReplaceComponent(component, 33);
        }

        public static void SetInstanceToEntityLookup(this Entity e)
        {
            e.AddOrReplaceComponent(new InstanceToEntityLookupComponent(), 33);
        }

        public static void SetInstanceToEntityLookup(this Entity e, System.Collections.Generic.IDictionary<System.Guid, System.Int32> instancesToEntities)
        {
            e.AddOrReplaceComponent(new InstanceToEntityLookupComponent(instancesToEntities), 33);
        }

        public static void SetInteractOnButtonPress(this Entity e, InteractOnButtonPressComponent component)
        {
            e.AddOrReplaceComponent(component, 34);
        }

        public static void SetInteractOnCollision(this Entity e, InteractOnCollisionComponent component)
        {
            e.AddOrReplaceComponent(component, 35);
        }

        public static void SetInteractOnRuleMatch(this Entity e, InteractOnRuleMatchComponent component)
        {
            e.AddOrReplaceComponent(component, 36);
        }

        public static void SetInteractOnRuleMatch(this Entity e)
        {
            e.AddOrReplaceComponent(new InteractOnRuleMatchComponent(), 36);
        }

        public static void SetInteractOnRuleMatch(this Entity e, Murder.Core.Dialogs.CriterionNode[] criteria)
        {
            e.AddOrReplaceComponent(new InteractOnRuleMatchComponent(criteria), 36);
        }

        public static void SetInteractOnStart(this Entity e, InteractOnStartComponent component)
        {
            e.AddOrReplaceComponent(component, 37);
        }

        public static void SetInteractor(this Entity e, InteractorComponent component)
        {
            e.AddOrReplaceComponent(component, 38);
        }

        public static void SetLine(this Entity e, LineComponent component)
        {
            e.AddOrReplaceComponent(component, 39);
        }

        public static void SetLine(this Entity e, Murder.Core.Dialogs.Line line, System.Single start)
        {
            e.AddOrReplaceComponent(new LineComponent(line, start), 39);
        }

        public static void SetMap(this Entity e, MapComponent component)
        {
            e.AddOrReplaceComponent(component, 40);
        }

        public static void SetMap(this Entity e, System.Int32 width, System.Int32 height)
        {
            e.AddOrReplaceComponent(new MapComponent(width, height), 40);
        }

        public static void SetMapDimensions(this Entity e, MapDimensionsComponent component)
        {
            e.AddOrReplaceComponent(component, 41);
        }

        public static void SetMapDimensions(this Entity e)
        {
            e.AddOrReplaceComponent(new MapDimensionsComponent(), 41);
        }

        public static void SetMapDimensions(this Entity e, System.Int32 width, System.Int32 height)
        {
            e.AddOrReplaceComponent(new MapDimensionsComponent(width, height), 41);
        }

        public static void SetMoveTo(this Entity e, MoveToComponent component)
        {
            e.AddOrReplaceComponent(component, 42);
        }

        public static void SetMoveTo(this Entity e, in Murder.Core.Geometry.Vector2 target, System.Single maxSpeed, System.Single accel)
        {
            e.AddOrReplaceComponent(new MoveToComponent(target, maxSpeed, accel), 42);
        }

        public static void SetParallax(this Entity e, ParallaxComponent component)
        {
            e.AddOrReplaceComponent(component, 43);
        }

        public static void SetParallax(this Entity e)
        {
            e.AddOrReplaceComponent(new ParallaxComponent(), 43);
        }

        public static void SetPathfind(this Entity e, PathfindComponent component)
        {
            e.AddOrReplaceComponent(component, 44);
        }

        public static void SetPathfind(this Entity e, in Murder.Core.Geometry.Vector2 target, Murder.Core.Ai.PathfindAlgorithmKind algorithm, System.Single maxSpeed, System.Single accel)
        {
            e.AddOrReplaceComponent(new PathfindComponent(target, algorithm, maxSpeed, accel), 44);
        }

        public static void SetPauseAnimation(this Entity e, PauseAnimationComponent component)
        {
            e.AddOrReplaceComponent(component, 45);
        }

        public static void SetPrefabRef(this Entity e, PrefabRefComponent component)
        {
            e.AddOrReplaceComponent(component, 46);
        }

        public static void SetPrefabRef(this Entity e, System.Guid assetGui)
        {
            e.AddOrReplaceComponent(new PrefabRefComponent(assetGui), 46);
        }

        public static void SetPushAway(this Entity e, PushAwayComponent component)
        {
            e.AddOrReplaceComponent(component, 47);
        }

        public static void SetPushAway(this Entity e, System.Int32 size, System.Int32 strength)
        {
            e.AddOrReplaceComponent(new PushAwayComponent(size, strength), 47);
        }

        public static void SetQuadtree(this Entity e, QuadtreeComponent component)
        {
            e.AddOrReplaceComponent(component, 48);
        }

        public static void SetQuadtree(this Entity e, Murder.Core.Geometry.Rectangle size)
        {
            e.AddOrReplaceComponent(new QuadtreeComponent(size), 48);
        }

        public static void SetRectPosition(this Entity e, RectPositionComponent component)
        {
            e.AddOrReplaceComponent(component, 49);
        }

        public static void SetRectPosition(this Entity e, System.Single top, System.Single left, System.Single bottom, System.Single right, Murder.Core.Geometry.Vector2 size, Murder.Core.Geometry.Vector2 origin, Bang.Components.IComponent parent)
        {
            e.AddOrReplaceComponent(new RectPositionComponent(top, left, bottom, right, size, origin, parent), 49);
        }

        public static void SetRemoveColliderWhenStopped(this Entity e, RemoveColliderWhenStoppedComponent component)
        {
            e.AddOrReplaceComponent(component, 50);
        }

        public static void SetRequiresVision(this Entity e, RequiresVisionComponent component)
        {
            e.AddOrReplaceComponent(component, 51);
        }

        public static void SetRotate(this Entity e, RotateComponent component)
        {
            e.AddOrReplaceComponent(component, 52);
        }

        public static void SetRotate(this Entity e)
        {
            e.AddOrReplaceComponent(new RotateComponent(), 52);
        }

        public static void SetRotate(this Entity e, System.Single rotation)
        {
            e.AddOrReplaceComponent(new RotateComponent(rotation), 52);
        }

        public static void SetRoute(this Entity e, RouteComponent component)
        {
            e.AddOrReplaceComponent(component, 53);
        }

        public static void SetRoute(this Entity e, System.Collections.Immutable.ImmutableDictionary<Murder.Core.Geometry.Point, Murder.Core.Geometry.Point> route, Murder.Core.Geometry.Point initial, Murder.Core.Geometry.Point target)
        {
            e.AddOrReplaceComponent(new RouteComponent(route, initial, target), 53);
        }

        public static void SetRuleWatcher(this Entity e, RuleWatcherComponent component)
        {
            e.AddOrReplaceComponent(component, 54);
        }

        public static void SetSituation(this Entity e, SituationComponent component)
        {
            e.AddOrReplaceComponent(component, 55);
        }

        public static void SetSituation(this Entity e)
        {
            e.AddOrReplaceComponent(new SituationComponent(), 55);
        }

        public static void SetSituation(this Entity e, System.Guid character, System.Int32 situation)
        {
            e.AddOrReplaceComponent(new SituationComponent(character, situation), 55);
        }

        public static void SetSpeaker(this Entity e, SpeakerComponent component)
        {
            e.AddOrReplaceComponent(component, 56);
        }

        public static void SetSpeaker(this Entity e, System.Guid speaker)
        {
            e.AddOrReplaceComponent(new SpeakerComponent(speaker), 56);
        }

        public static void SetTargetInteraction(this Entity e, TargetInteractionComponent component)
        {
            e.AddOrReplaceComponent(component, 57);
        }

        public static void SetTargetInteraction(this Entity e, System.Int32 target)
        {
            e.AddOrReplaceComponent(new TargetInteractionComponent(target), 57);
        }

        public static void SetTextBox(this Entity e, TextBoxComponent component)
        {
            e.AddOrReplaceComponent(component, 58);
        }

        public static void SetTextBox(this Entity e, System.String text, System.Int32 visibleCaracters, System.Single fontSize, System.Single sorting, Murder.Core.Graphics.Color color, Murder.Core.Geometry.Vector2 offset)
        {
            e.AddOrReplaceComponent(new TextBoxComponent(text, visibleCaracters, fontSize, sorting, color, offset), 58);
        }

        public static void SetTexture(this Entity e, TextureComponent component)
        {
            e.AddOrReplaceComponent(component, 59);
        }

        public static void SetTexture(this Entity e, System.String texture, Murder.Core.Geometry.Vector2 offset)
        {
            e.AddOrReplaceComponent(new TextureComponent(texture, offset), 59);
        }

        public static void SetTileGrid(this Entity e, TileGridComponent component)
        {
            e.AddOrReplaceComponent(component, 60);
        }

        public static void SetTileGrid(this Entity e)
        {
            e.AddOrReplaceComponent(new TileGridComponent(), 60);
        }

        public static void SetTileGrid(this Entity e, Murder.Core.TileGrid grid)
        {
            e.AddOrReplaceComponent(new TileGridComponent(grid), 60);
        }

        public static void SetTileGrid(this Entity e, Murder.Core.Geometry.Point origin, System.Int32 width, System.Int32 height)
        {
            e.AddOrReplaceComponent(new TileGridComponent(origin, width, height), 60);
        }

        public static void SetTileGrid(this Entity e, System.Int32 width, System.Int32 height)
        {
            e.AddOrReplaceComponent(new TileGridComponent(width, height), 60);
        }

        public static void SetTileset(this Entity e, TilesetComponent component)
        {
            e.AddOrReplaceComponent(component, 61);
        }

        public static void SetTileset(this Entity e)
        {
            e.AddOrReplaceComponent(new TilesetComponent(), 61);
        }

        public static void SetTileset(this Entity e, System.Collections.Immutable.ImmutableArray<System.Guid> tilesets, System.Guid floor)
        {
            e.AddOrReplaceComponent(new TilesetComponent(tilesets, floor), 61);
        }

        public static void SetVelocity(this Entity e, VelocityComponent component)
        {
            e.AddOrReplaceComponent(component, 62);
        }

        public static void SetVelocity(this Entity e, Murder.Core.Geometry.Vector2 velocity)
        {
            e.AddOrReplaceComponent(new VelocityComponent(velocity), 62);
        }

        public static void SetVelocity(this Entity e, System.Single x, System.Single y)
        {
            e.AddOrReplaceComponent(new VelocityComponent(x, y), 62);
        }

        public static void SetVerticalPosition(this Entity e, VerticalPositionComponent component)
        {
            e.AddOrReplaceComponent(component, 63);
        }

        public static void SetVerticalPosition(this Entity e)
        {
            e.AddOrReplaceComponent(new VerticalPositionComponent(), 63);
        }

        public static void SetVerticalPosition(this Entity e, System.Single z, System.Single zVelocity, System.Boolean hasGravity)
        {
            e.AddOrReplaceComponent(new VerticalPositionComponent(z, zVelocity, hasGravity), 63);
        }

        public static void SetWaitForVacancy(this Entity e, WaitForVacancyComponent component)
        {
            e.AddOrReplaceComponent(component, 64);
        }

        public static void SetWaitForVacancy(this Entity e, System.Boolean alertParent)
        {
            e.AddOrReplaceComponent(new WaitForVacancyComponent(alertParent), 64);
        }

        public static void SetStateMachine(this Entity e, IStateMachineComponent component)
        {
            e.AddOrReplaceComponent(component, 65);
        }

        public static void SetInteractive(this Entity e, IInteractiveComponent component)
        {
            e.AddOrReplaceComponent(component, 66);
        }

        public static void SetTransform(this Entity e, IMurderTransformComponent component)
        {
            e.AddOrReplaceComponent(component, 67);
        }

        public static void SetTransformBase(this Entity e, ITransformComponent component)
        {
            e.AddOrReplaceComponent(component, 67);
        }

        #endregion
        
        #region Component "Remove" methods!
        public static bool RemoveAdvancedCollision(this Entity e)
        {
            return e.RemoveComponent(0);
        }

        public static bool RemoveAgent(this Entity e)
        {
            return e.RemoveComponent(1);
        }

        public static bool RemoveAgentImpulse(this Entity e)
        {
            return e.RemoveComponent(2);
        }

        public static bool RemoveAgentSprite(this Entity e)
        {
            return e.RemoveComponent(3);
        }

        public static bool RemoveAlpha(this Entity e)
        {
            return e.RemoveComponent(4);
        }

        public static bool RemoveAnimationComplete(this Entity e)
        {
            return e.RemoveComponent(5);
        }

        public static bool RemoveAnimationOverload(this Entity e)
        {
            return e.RemoveComponent(6);
        }

        public static bool RemoveAnimationSpeedOverload(this Entity e)
        {
            return e.RemoveComponent(7);
        }

        public static bool RemoveAseprite(this Entity e)
        {
            return e.RemoveComponent(8);
        }

        public static bool RemoveCameraFollow(this Entity e)
        {
            return e.RemoveComponent(9);
        }

        public static bool RemoveCarve(this Entity e)
        {
            return e.RemoveComponent(10);
        }

        public static bool RemoveCollider(this Entity e)
        {
            return e.RemoveComponent(11);
        }

        public static bool RemoveCustomDraw(this Entity e)
        {
            return e.RemoveComponent(12);
        }

        public static bool RemoveCutsceneAnchors(this Entity e)
        {
            return e.RemoveComponent(13);
        }

        public static bool RemoveDestroyAtTime(this Entity e)
        {
            return e.RemoveComponent(14);
        }

        public static bool RemoveDestroyOnAnimationComplete(this Entity e)
        {
            return e.RemoveComponent(15);
        }

        public static bool RemoveDestroyOnCollision(this Entity e)
        {
            return e.RemoveComponent(16);
        }

        public static bool RemoveDisableAgent(this Entity e)
        {
            return e.RemoveComponent(17);
        }

        public static bool RemoveDoNotPause(this Entity e)
        {
            return e.RemoveComponent(18);
        }

        public static bool RemoveDrawRectangle(this Entity e)
        {
            return e.RemoveComponent(19);
        }

        public static bool RemoveEntityTracker(this Entity e)
        {
            return e.RemoveComponent(20);
        }

        public static bool RemoveFacing(this Entity e)
        {
            return e.RemoveComponent(21);
        }

        public static bool RemoveFadeScreen(this Entity e)
        {
            return e.RemoveComponent(22);
        }

        public static bool RemoveFadeTransition(this Entity e)
        {
            return e.RemoveComponent(23);
        }

        public static bool RemoveFadeWhenInArea(this Entity e)
        {
            return e.RemoveComponent(24);
        }

        public static bool RemoveFlashSprite(this Entity e)
        {
            return e.RemoveComponent(25);
        }

        public static bool RemoveFriction(this Entity e)
        {
            return e.RemoveComponent(26);
        }

        public static bool RemoveGlobalShader(this Entity e)
        {
            return e.RemoveComponent(27);
        }

        public static bool RemoveGuidToIdTargetInteraction(this Entity e)
        {
            return e.RemoveComponent(28);
        }

        public static bool RemoveHAAStarPathfind(this Entity e)
        {
            return e.RemoveComponent(29);
        }

        public static bool RemoveHasVision(this Entity e)
        {
            return e.RemoveComponent(30);
        }

        public static bool RemoveHighlightSprite(this Entity e)
        {
            return e.RemoveComponent(31);
        }

        public static bool RemoveIndestructible(this Entity e)
        {
            return e.RemoveComponent(32);
        }

        public static bool RemoveInstanceToEntityLookup(this Entity e)
        {
            return e.RemoveComponent(33);
        }

        public static bool RemoveInteractOnButtonPress(this Entity e)
        {
            return e.RemoveComponent(34);
        }

        public static bool RemoveInteractOnCollision(this Entity e)
        {
            return e.RemoveComponent(35);
        }

        public static bool RemoveInteractOnRuleMatch(this Entity e)
        {
            return e.RemoveComponent(36);
        }

        public static bool RemoveInteractOnStart(this Entity e)
        {
            return e.RemoveComponent(37);
        }

        public static bool RemoveInteractor(this Entity e)
        {
            return e.RemoveComponent(38);
        }

        public static bool RemoveLine(this Entity e)
        {
            return e.RemoveComponent(39);
        }

        public static bool RemoveMap(this Entity e)
        {
            return e.RemoveComponent(40);
        }

        public static bool RemoveMapDimensions(this Entity e)
        {
            return e.RemoveComponent(41);
        }

        public static bool RemoveMoveTo(this Entity e)
        {
            return e.RemoveComponent(42);
        }

        public static bool RemoveParallax(this Entity e)
        {
            return e.RemoveComponent(43);
        }

        public static bool RemovePathfind(this Entity e)
        {
            return e.RemoveComponent(44);
        }

        public static bool RemovePauseAnimation(this Entity e)
        {
            return e.RemoveComponent(45);
        }

        public static bool RemovePrefabRef(this Entity e)
        {
            return e.RemoveComponent(46);
        }

        public static bool RemovePushAway(this Entity e)
        {
            return e.RemoveComponent(47);
        }

        public static bool RemoveQuadtree(this Entity e)
        {
            return e.RemoveComponent(48);
        }

        public static bool RemoveRectPosition(this Entity e)
        {
            return e.RemoveComponent(49);
        }

        public static bool RemoveRemoveColliderWhenStopped(this Entity e)
        {
            return e.RemoveComponent(50);
        }

        public static bool RemoveRequiresVision(this Entity e)
        {
            return e.RemoveComponent(51);
        }

        public static bool RemoveRotate(this Entity e)
        {
            return e.RemoveComponent(52);
        }

        public static bool RemoveRoute(this Entity e)
        {
            return e.RemoveComponent(53);
        }

        public static bool RemoveRuleWatcher(this Entity e)
        {
            return e.RemoveComponent(54);
        }

        public static bool RemoveSituation(this Entity e)
        {
            return e.RemoveComponent(55);
        }

        public static bool RemoveSpeaker(this Entity e)
        {
            return e.RemoveComponent(56);
        }

        public static bool RemoveTargetInteraction(this Entity e)
        {
            return e.RemoveComponent(57);
        }

        public static bool RemoveTextBox(this Entity e)
        {
            return e.RemoveComponent(58);
        }

        public static bool RemoveTexture(this Entity e)
        {
            return e.RemoveComponent(59);
        }

        public static bool RemoveTileGrid(this Entity e)
        {
            return e.RemoveComponent(60);
        }

        public static bool RemoveTileset(this Entity e)
        {
            return e.RemoveComponent(61);
        }

        public static bool RemoveVelocity(this Entity e)
        {
            return e.RemoveComponent(62);
        }

        public static bool RemoveVerticalPosition(this Entity e)
        {
            return e.RemoveComponent(63);
        }

        public static bool RemoveWaitForVacancy(this Entity e)
        {
            return e.RemoveComponent(64);
        }

        public static bool RemoveStateMachine(this Entity e)
        {
            return e.RemoveComponent(65);
        }

        public static bool RemoveInteractive(this Entity e)
        {
            return e.RemoveComponent(66);
        }

        public static bool RemoveTransform(this Entity e)
        {
            return e.RemoveComponent(67);
        }

        public static bool RemoveTransformBase(this Entity e)
        {
            return e.RemoveComponent(67);
        }

        #endregion

        #region Message "Has" checkers!
        public static bool HasAnimationCompleteMessage(this Entity e)
        {
            return e.HasMessage(68);
        }

        public static bool HasCollidedWithMessage(this Entity e)
        {
            return e.HasMessage(69);
        }

        public static bool HasHighlightMessage(this Entity e)
        {
            return e.HasMessage(70);
        }

        public static bool HasInteractMessage(this Entity e)
        {
            return e.HasMessage(71);
        }

        public static bool HasInteractorMessage(this Entity e)
        {
            return e.HasMessage(72);
        }

        public static bool HasNextDialogMessage(this Entity e)
        {
            return e.HasMessage(73);
        }

        public static bool HasPathNotPossibleMessage(this Entity e)
        {
            return e.HasMessage(74);
        }

        #endregion
    }

    public class MurderLookupImplementation : ComponentsLookup
    {
        private static readonly ImmutableHashSet<int> _relativeComponents = new HashSet<int>()
        {
            49,
            67,
            67
        }.ToImmutableHashSet();

        public override ImmutableHashSet<int> RelativeComponents => _relativeComponents;

        private static readonly ImmutableDictionary<Type, int> _componentsIndex = new Dictionary<Type, int>()
        {
            { typeof(AdvancedCollisionComponent), 0 },
            { typeof(AgentComponent), 1 },
            { typeof(AgentImpulseComponent), 2 },
            { typeof(AgentSpriteComponent), 3 },
            { typeof(AlphaComponent), 4 },
            { typeof(AnimationCompleteComponent), 5 },
            { typeof(AnimationOverloadComponent), 6 },
            { typeof(AnimationSpeedOverload), 7 },
            { typeof(AsepriteComponent), 8 },
            { typeof(CameraFollowComponent), 9 },
            { typeof(CarveComponent), 10 },
            { typeof(ColliderComponent), 11 },
            { typeof(CustomDrawComponent), 12 },
            { typeof(CutsceneAnchorsComponent), 13 },
            { typeof(DestroyAtTimeComponent), 14 },
            { typeof(DestroyOnAnimationCompleteComponent), 15 },
            { typeof(DestroyOnCollisionComponent), 16 },
            { typeof(DisableAgentComponent), 17 },
            { typeof(DoNotPauseComponent), 18 },
            { typeof(DrawRectangleComponent), 19 },
            { typeof(EntityTrackerComponent), 20 },
            { typeof(FacingComponent), 21 },
            { typeof(FadeScreenComponent), 22 },
            { typeof(FadeTransitionComponent), 23 },
            { typeof(FadeWhenInAreaComponent), 24 },
            { typeof(FlashSpriteComponent), 25 },
            { typeof(FrictionComponent), 26 },
            { typeof(GlobalShaderComponent), 27 },
            { typeof(GuidToIdTargetInteractionComponent), 28 },
            { typeof(HAAStarPathfindComponent), 29 },
            { typeof(HasVisionComponent), 30 },
            { typeof(HighlightSpriteComponent), 31 },
            { typeof(IndestructibleComponent), 32 },
            { typeof(InstanceToEntityLookupComponent), 33 },
            { typeof(InteractOnButtonPressComponent), 34 },
            { typeof(InteractOnCollisionComponent), 35 },
            { typeof(InteractOnRuleMatchComponent), 36 },
            { typeof(InteractOnStartComponent), 37 },
            { typeof(InteractorComponent), 38 },
            { typeof(LineComponent), 39 },
            { typeof(MapComponent), 40 },
            { typeof(MapDimensionsComponent), 41 },
            { typeof(MoveToComponent), 42 },
            { typeof(ParallaxComponent), 43 },
            { typeof(PathfindComponent), 44 },
            { typeof(PauseAnimationComponent), 45 },
            { typeof(PrefabRefComponent), 46 },
            { typeof(PushAwayComponent), 47 },
            { typeof(QuadtreeComponent), 48 },
            { typeof(RectPositionComponent), 49 },
            { typeof(RemoveColliderWhenStoppedComponent), 50 },
            { typeof(RequiresVisionComponent), 51 },
            { typeof(RotateComponent), 52 },
            { typeof(RouteComponent), 53 },
            { typeof(RuleWatcherComponent), 54 },
            { typeof(SituationComponent), 55 },
            { typeof(SpeakerComponent), 56 },
            { typeof(TargetInteractionComponent), 57 },
            { typeof(TextBoxComponent), 58 },
            { typeof(TextureComponent), 59 },
            { typeof(TileGridComponent), 60 },
            { typeof(TilesetComponent), 61 },
            { typeof(VelocityComponent), 62 },
            { typeof(VerticalPositionComponent), 63 },
            { typeof(WaitForVacancyComponent), 64 },
            { typeof(IStateMachineComponent), 65 },
            { typeof(IInteractiveComponent), 66 },
            { typeof(IMurderTransformComponent), 67 },
            { typeof(ITransformComponent), 67 },
            { typeof(StateMachineComponent<Coroutine>), 65 },
            { typeof(StateMachineComponent<DialogStateMachine>), 65 },
            { typeof(InteractiveComponent<AddComponentOnInteraction>), 66 },
            { typeof(InteractiveComponent<InteractionCollection>), 66 },
            { typeof(InteractiveComponent<TalkToInteraction>), 66 },
            { typeof(PositionComponent), 67 },
            { typeof(PositionRotationComponent), 67 }
        }.ToImmutableDictionary();

        protected override ImmutableDictionary<Type, int> ComponentsIndex => _componentsIndex;

        private static readonly ImmutableDictionary<Type, int> _messagesIndex = new Dictionary<Type, int>()
        {
            { typeof(AnimationCompleteMessage), 68 },
            { typeof(CollidedWithMessage), 69 },
            { typeof(HighlightMessage), 70 },
            { typeof(InteractMessage), 71 },
            { typeof(InteractorMessage), 72 },
            { typeof(NextDialogMessage), 73 },
            { typeof(PathNotPossibleMessage), 74 }
        }.ToImmutableDictionary();

        protected override ImmutableDictionary<Type, int> MessagesIndex => _messagesIndex;
    }
}