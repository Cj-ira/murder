/*             |￣￣￣￣￣￣\                                                                  *
 *             |    STOP   |                                                                 *
 *             |   EDITING |                                                                 *
 *             |    THIS   |                                                                 *
 *             |    FILE   |                                                                 *
 *             | ＿＿＿＿＿ /                                                                 *
 *             (\__/)  ||                                                                    *
 *             (•ㅅ•)  ||                                                                    *
 *             / 　 づ                                                                       *
 *             ￣￣￣                                                                         *
 * This code was generated by our own generator! In order to modify this, please run the     *
 * generator with whatever settings you want.                                                *
 *                                                                                           */

using Murder.Components;
using Bang.Interactions;
using Murder.Interactions;
using Murder.Messages;
using Bang.Components;
using Bang;
using Bang.Entities;
using System.Collections.Immutable;

namespace Murder.Entities
{
    public enum ComponentType
    {
        AdvancedCollision = 0,
        Agent = 1,
        AgentImpulse = 2,
        AgentSprite = 3,
        Alpha = 4,
        AnimationOverload = 5,
        Aseprite = 6,
        CameraFollow = 7,
        Carve = 8,
        Collider = 9,
        CustomDraw = 10,
        DestroyOnCollision = 11,
        DrawRectangle = 12,
        Facing = 13,
        FadeScreen = 14,
        FadeTransition = 15,
        FadeWhenInArea = 16,
        Friction = 17,
        GlobalShader = 18,
        HAAStarPathfind = 19,
        HasVision = 20,
        InteractOnButtonPress = 21,
        InteractOnRuleMatch = 22,
        InteractOnStart = 23,
        Interactor = 24,
        ItemHighlighted = 25,
        LastSeen = 26,
        Line = 27,
        Map = 28,
        MapDimensions = 29,
        MapTheme = 30,
        MoveTo = 31,
        NotSolid = 32,
        Owner = 33,
        Position = 34,
        PrefabRef = 35,
        PushAway = 36,
        Quadtree = 37,
        RectPosition = 38,
        RequiresVision = 39,
        Rotate = 40,
        RuleWatcher = 41,
        Situation = 42,
        TextBox = 43,
        Texture = 44,
        TiledEntity = 45,
        Velocity = 46,
        WaitForVacancy = 47,
        Interactive = 48
    }

    public enum MessageType
    {
        AnimationComplete = 49,
        Highlight = 50,
        Interactor = 51
    }

    public static class EntityExtensions
    {
        #region Component "Get" methods!
        internal static AdvancedCollisionComponent GetAdvancedCollision(this Entity e)
        {
            return e.GetComponent<AdvancedCollisionComponent>(0);
        }

        internal static AgentComponent GetAgent(this Entity e)
        {
            return e.GetComponent<AgentComponent>(1);
        }

        internal static AgentImpulseComponent GetAgentImpulse(this Entity e)
        {
            return e.GetComponent<AgentImpulseComponent>(2);
        }

        internal static AgentSpriteComponent GetAgentSprite(this Entity e)
        {
            return e.GetComponent<AgentSpriteComponent>(3);
        }

        internal static AlphaComponent GetAlpha(this Entity e)
        {
            return e.GetComponent<AlphaComponent>(4);
        }

        internal static AnimationOverloadComponent GetAnimationOverload(this Entity e)
        {
            return e.GetComponent<AnimationOverloadComponent>(5);
        }

        internal static AsepriteComponent GetAseprite(this Entity e)
        {
            return e.GetComponent<AsepriteComponent>(6);
        }

        internal static CameraFollowComponent GetCameraFollow(this Entity e)
        {
            return e.GetComponent<CameraFollowComponent>(7);
        }

        internal static CarveComponent GetCarve(this Entity e)
        {
            return e.GetComponent<CarveComponent>(8);
        }

        internal static ColliderComponent GetCollider(this Entity e)
        {
            return e.GetComponent<ColliderComponent>(9);
        }

        internal static CustomDrawComponent GetCustomDraw(this Entity e)
        {
            return e.GetComponent<CustomDrawComponent>(10);
        }

        internal static DestroyOnCollisionComponent GetDestroyOnCollision(this Entity e)
        {
            return e.GetComponent<DestroyOnCollisionComponent>(11);
        }

        internal static DrawRectangleComponent GetDrawRectangle(this Entity e)
        {
            return e.GetComponent<DrawRectangleComponent>(12);
        }

        internal static FacingComponent GetFacing(this Entity e)
        {
            return e.GetComponent<FacingComponent>(13);
        }

        internal static FadeScreenComponent GetFadeScreen(this Entity e)
        {
            return e.GetComponent<FadeScreenComponent>(14);
        }

        internal static FadeTransitionComponent GetFadeTransition(this Entity e)
        {
            return e.GetComponent<FadeTransitionComponent>(15);
        }

        internal static FadeWhenInAreaComponent GetFadeWhenInArea(this Entity e)
        {
            return e.GetComponent<FadeWhenInAreaComponent>(16);
        }

        internal static FrictionComponent GetFriction(this Entity e)
        {
            return e.GetComponent<FrictionComponent>(17);
        }

        internal static GlobalShaderComponent GetGlobalShader(this Entity e)
        {
            return e.GetComponent<GlobalShaderComponent>(18);
        }

        internal static HAAStarPathfindComponent GetHAAStarPathfind(this Entity e)
        {
            return e.GetComponent<HAAStarPathfindComponent>(19);
        }

        internal static HasVisionComponent GetHasVision(this Entity e)
        {
            return e.GetComponent<HasVisionComponent>(20);
        }

        internal static InteractOnButtonPress GetInteractOnButtonPress(this Entity e)
        {
            return e.GetComponent<InteractOnButtonPress>(21);
        }

        internal static InteractOnRuleMatchComponent GetInteractOnRuleMatch(this Entity e)
        {
            return e.GetComponent<InteractOnRuleMatchComponent>(22);
        }

        internal static InteractOnStartComponent GetInteractOnStart(this Entity e)
        {
            return e.GetComponent<InteractOnStartComponent>(23);
        }

        internal static InteractorComponent GetInteractor(this Entity e)
        {
            return e.GetComponent<InteractorComponent>(24);
        }

        internal static ItemHighlightedComponent GetItemHighlighted(this Entity e)
        {
            return e.GetComponent<ItemHighlightedComponent>(25);
        }

        internal static LastSeenComponent GetLastSeen(this Entity e)
        {
            return e.GetComponent<LastSeenComponent>(26);
        }

        internal static LineComponent GetLine(this Entity e)
        {
            return e.GetComponent<LineComponent>(27);
        }

        internal static MapComponent GetMap(this Entity e)
        {
            return e.GetComponent<MapComponent>(28);
        }

        internal static MapDimensionsComponent GetMapDimensions(this Entity e)
        {
            return e.GetComponent<MapDimensionsComponent>(29);
        }

        internal static MapThemeComponent GetMapTheme(this Entity e)
        {
            return e.GetComponent<MapThemeComponent>(30);
        }

        internal static MoveToComponent GetMoveTo(this Entity e)
        {
            return e.GetComponent<MoveToComponent>(31);
        }

        internal static NotSolidComponent GetNotSolid(this Entity e)
        {
            return e.GetComponent<NotSolidComponent>(32);
        }

        internal static OwnerComponent GetOwner(this Entity e)
        {
            return e.GetComponent<OwnerComponent>(33);
        }

        internal static PositionComponent GetPosition(this Entity e)
        {
            return e.GetComponent<PositionComponent>(34);
        }

        internal static PrefabRefComponent GetPrefabRef(this Entity e)
        {
            return e.GetComponent<PrefabRefComponent>(35);
        }

        internal static PushAwayComponent GetPushAway(this Entity e)
        {
            return e.GetComponent<PushAwayComponent>(36);
        }

        internal static QuadtreeComponent GetQuadtree(this Entity e)
        {
            return e.GetComponent<QuadtreeComponent>(37);
        }

        internal static RectPositionComponent GetRectPosition(this Entity e)
        {
            return e.GetComponent<RectPositionComponent>(38);
        }

        internal static RequiresVisionComponent GetRequiresVision(this Entity e)
        {
            return e.GetComponent<RequiresVisionComponent>(39);
        }

        internal static RotateComponent GetRotate(this Entity e)
        {
            return e.GetComponent<RotateComponent>(40);
        }

        internal static RuleWatcherComponent GetRuleWatcher(this Entity e)
        {
            return e.GetComponent<RuleWatcherComponent>(41);
        }

        internal static SituationComponent GetSituation(this Entity e)
        {
            return e.GetComponent<SituationComponent>(42);
        }

        internal static TextBoxComponent GetTextBox(this Entity e)
        {
            return e.GetComponent<TextBoxComponent>(43);
        }

        internal static TextureComponent GetTexture(this Entity e)
        {
            return e.GetComponent<TextureComponent>(44);
        }

        internal static TiledEntityComponent GetTiledEntity(this Entity e)
        {
            return e.GetComponent<TiledEntityComponent>(45);
        }

        internal static VelocityComponent GetVelocity(this Entity e)
        {
            return e.GetComponent<VelocityComponent>(46);
        }

        internal static WaitForVacancyComponent GetWaitForVacancy(this Entity e)
        {
            return e.GetComponent<WaitForVacancyComponent>(47);
        }

        internal static IInteractiveComponent GetInteractive(this Entity e)
        {
            return e.GetComponent<IInteractiveComponent>(48);
        }

        #endregion
        
        #region Component "Has" checkers!
        internal static bool HasAdvancedCollision(this Entity e)
        {
            return e.HasComponent(0);
        }

        internal static bool HasAgent(this Entity e)
        {
            return e.HasComponent(1);
        }

        internal static bool HasAgentImpulse(this Entity e)
        {
            return e.HasComponent(2);
        }

        internal static bool HasAgentSprite(this Entity e)
        {
            return e.HasComponent(3);
        }

        internal static bool HasAlpha(this Entity e)
        {
            return e.HasComponent(4);
        }

        internal static bool HasAnimationOverload(this Entity e)
        {
            return e.HasComponent(5);
        }

        internal static bool HasAseprite(this Entity e)
        {
            return e.HasComponent(6);
        }

        internal static bool HasCameraFollow(this Entity e)
        {
            return e.HasComponent(7);
        }

        internal static bool HasCarve(this Entity e)
        {
            return e.HasComponent(8);
        }

        internal static bool HasCollider(this Entity e)
        {
            return e.HasComponent(9);
        }

        internal static bool HasCustomDraw(this Entity e)
        {
            return e.HasComponent(10);
        }

        internal static bool HasDestroyOnCollision(this Entity e)
        {
            return e.HasComponent(11);
        }

        internal static bool HasDrawRectangle(this Entity e)
        {
            return e.HasComponent(12);
        }

        internal static bool HasFacing(this Entity e)
        {
            return e.HasComponent(13);
        }

        internal static bool HasFadeScreen(this Entity e)
        {
            return e.HasComponent(14);
        }

        internal static bool HasFadeTransition(this Entity e)
        {
            return e.HasComponent(15);
        }

        internal static bool HasFadeWhenInArea(this Entity e)
        {
            return e.HasComponent(16);
        }

        internal static bool HasFriction(this Entity e)
        {
            return e.HasComponent(17);
        }

        internal static bool HasGlobalShader(this Entity e)
        {
            return e.HasComponent(18);
        }

        internal static bool HasHAAStarPathfind(this Entity e)
        {
            return e.HasComponent(19);
        }

        internal static bool HasHasVision(this Entity e)
        {
            return e.HasComponent(20);
        }

        internal static bool HasInteractOnButtonPress(this Entity e)
        {
            return e.HasComponent(21);
        }

        internal static bool HasInteractOnRuleMatch(this Entity e)
        {
            return e.HasComponent(22);
        }

        internal static bool HasInteractOnStart(this Entity e)
        {
            return e.HasComponent(23);
        }

        internal static bool HasInteractor(this Entity e)
        {
            return e.HasComponent(24);
        }

        internal static bool HasItemHighlighted(this Entity e)
        {
            return e.HasComponent(25);
        }

        internal static bool HasLastSeen(this Entity e)
        {
            return e.HasComponent(26);
        }

        internal static bool HasLine(this Entity e)
        {
            return e.HasComponent(27);
        }

        internal static bool HasMap(this Entity e)
        {
            return e.HasComponent(28);
        }

        internal static bool HasMapDimensions(this Entity e)
        {
            return e.HasComponent(29);
        }

        internal static bool HasMapTheme(this Entity e)
        {
            return e.HasComponent(30);
        }

        internal static bool HasMoveTo(this Entity e)
        {
            return e.HasComponent(31);
        }

        internal static bool HasNotSolid(this Entity e)
        {
            return e.HasComponent(32);
        }

        internal static bool HasOwner(this Entity e)
        {
            return e.HasComponent(33);
        }

        internal static bool HasPosition(this Entity e)
        {
            return e.HasComponent(34);
        }

        internal static bool HasPrefabRef(this Entity e)
        {
            return e.HasComponent(35);
        }

        internal static bool HasPushAway(this Entity e)
        {
            return e.HasComponent(36);
        }

        internal static bool HasQuadtree(this Entity e)
        {
            return e.HasComponent(37);
        }

        internal static bool HasRectPosition(this Entity e)
        {
            return e.HasComponent(38);
        }

        internal static bool HasRequiresVision(this Entity e)
        {
            return e.HasComponent(39);
        }

        internal static bool HasRotate(this Entity e)
        {
            return e.HasComponent(40);
        }

        internal static bool HasRuleWatcher(this Entity e)
        {
            return e.HasComponent(41);
        }

        internal static bool HasSituation(this Entity e)
        {
            return e.HasComponent(42);
        }

        internal static bool HasTextBox(this Entity e)
        {
            return e.HasComponent(43);
        }

        internal static bool HasTexture(this Entity e)
        {
            return e.HasComponent(44);
        }

        internal static bool HasTiledEntity(this Entity e)
        {
            return e.HasComponent(45);
        }

        internal static bool HasVelocity(this Entity e)
        {
            return e.HasComponent(46);
        }

        internal static bool HasWaitForVacancy(this Entity e)
        {
            return e.HasComponent(47);
        }

        internal static bool HasInteractive(this Entity e)
        {
            return e.HasComponent(48);
        }

        #endregion
        
        #region Component "TryGet" methods!
        internal static AdvancedCollisionComponent? TryGetAdvancedCollision(this Entity e)
        {
            if (!e.HasAdvancedCollision())
            {
                return null;
            }

            return e.GetAdvancedCollision();
        }

        internal static AgentComponent? TryGetAgent(this Entity e)
        {
            if (!e.HasAgent())
            {
                return null;
            }

            return e.GetAgent();
        }

        internal static AgentImpulseComponent? TryGetAgentImpulse(this Entity e)
        {
            if (!e.HasAgentImpulse())
            {
                return null;
            }

            return e.GetAgentImpulse();
        }

        internal static AgentSpriteComponent? TryGetAgentSprite(this Entity e)
        {
            if (!e.HasAgentSprite())
            {
                return null;
            }

            return e.GetAgentSprite();
        }

        internal static AlphaComponent? TryGetAlpha(this Entity e)
        {
            if (!e.HasAlpha())
            {
                return null;
            }

            return e.GetAlpha();
        }

        internal static AnimationOverloadComponent? TryGetAnimationOverload(this Entity e)
        {
            if (!e.HasAnimationOverload())
            {
                return null;
            }

            return e.GetAnimationOverload();
        }

        internal static AsepriteComponent? TryGetAseprite(this Entity e)
        {
            if (!e.HasAseprite())
            {
                return null;
            }

            return e.GetAseprite();
        }

        internal static CameraFollowComponent? TryGetCameraFollow(this Entity e)
        {
            if (!e.HasCameraFollow())
            {
                return null;
            }

            return e.GetCameraFollow();
        }

        internal static CarveComponent? TryGetCarve(this Entity e)
        {
            if (!e.HasCarve())
            {
                return null;
            }

            return e.GetCarve();
        }

        internal static ColliderComponent? TryGetCollider(this Entity e)
        {
            if (!e.HasCollider())
            {
                return null;
            }

            return e.GetCollider();
        }

        internal static CustomDrawComponent? TryGetCustomDraw(this Entity e)
        {
            if (!e.HasCustomDraw())
            {
                return null;
            }

            return e.GetCustomDraw();
        }

        internal static DestroyOnCollisionComponent? TryGetDestroyOnCollision(this Entity e)
        {
            if (!e.HasDestroyOnCollision())
            {
                return null;
            }

            return e.GetDestroyOnCollision();
        }

        internal static DrawRectangleComponent? TryGetDrawRectangle(this Entity e)
        {
            if (!e.HasDrawRectangle())
            {
                return null;
            }

            return e.GetDrawRectangle();
        }

        internal static FacingComponent? TryGetFacing(this Entity e)
        {
            if (!e.HasFacing())
            {
                return null;
            }

            return e.GetFacing();
        }

        internal static FadeScreenComponent? TryGetFadeScreen(this Entity e)
        {
            if (!e.HasFadeScreen())
            {
                return null;
            }

            return e.GetFadeScreen();
        }

        internal static FadeTransitionComponent? TryGetFadeTransition(this Entity e)
        {
            if (!e.HasFadeTransition())
            {
                return null;
            }

            return e.GetFadeTransition();
        }

        internal static FadeWhenInAreaComponent? TryGetFadeWhenInArea(this Entity e)
        {
            if (!e.HasFadeWhenInArea())
            {
                return null;
            }

            return e.GetFadeWhenInArea();
        }

        internal static FrictionComponent? TryGetFriction(this Entity e)
        {
            if (!e.HasFriction())
            {
                return null;
            }

            return e.GetFriction();
        }

        internal static GlobalShaderComponent? TryGetGlobalShader(this Entity e)
        {
            if (!e.HasGlobalShader())
            {
                return null;
            }

            return e.GetGlobalShader();
        }

        internal static HAAStarPathfindComponent? TryGetHAAStarPathfind(this Entity e)
        {
            if (!e.HasHAAStarPathfind())
            {
                return null;
            }

            return e.GetHAAStarPathfind();
        }

        internal static HasVisionComponent? TryGetHasVision(this Entity e)
        {
            if (!e.HasHasVision())
            {
                return null;
            }

            return e.GetHasVision();
        }

        internal static InteractOnButtonPress? TryGetInteractOnButtonPress(this Entity e)
        {
            if (!e.HasInteractOnButtonPress())
            {
                return null;
            }

            return e.GetInteractOnButtonPress();
        }

        internal static InteractOnRuleMatchComponent? TryGetInteractOnRuleMatch(this Entity e)
        {
            if (!e.HasInteractOnRuleMatch())
            {
                return null;
            }

            return e.GetInteractOnRuleMatch();
        }

        internal static InteractOnStartComponent? TryGetInteractOnStart(this Entity e)
        {
            if (!e.HasInteractOnStart())
            {
                return null;
            }

            return e.GetInteractOnStart();
        }

        internal static InteractorComponent? TryGetInteractor(this Entity e)
        {
            if (!e.HasInteractor())
            {
                return null;
            }

            return e.GetInteractor();
        }

        internal static ItemHighlightedComponent? TryGetItemHighlighted(this Entity e)
        {
            if (!e.HasItemHighlighted())
            {
                return null;
            }

            return e.GetItemHighlighted();
        }

        internal static LastSeenComponent? TryGetLastSeen(this Entity e)
        {
            if (!e.HasLastSeen())
            {
                return null;
            }

            return e.GetLastSeen();
        }

        internal static LineComponent? TryGetLine(this Entity e)
        {
            if (!e.HasLine())
            {
                return null;
            }

            return e.GetLine();
        }

        internal static MapComponent? TryGetMap(this Entity e)
        {
            if (!e.HasMap())
            {
                return null;
            }

            return e.GetMap();
        }

        internal static MapDimensionsComponent? TryGetMapDimensions(this Entity e)
        {
            if (!e.HasMapDimensions())
            {
                return null;
            }

            return e.GetMapDimensions();
        }

        internal static MapThemeComponent? TryGetMapTheme(this Entity e)
        {
            if (!e.HasMapTheme())
            {
                return null;
            }

            return e.GetMapTheme();
        }

        internal static MoveToComponent? TryGetMoveTo(this Entity e)
        {
            if (!e.HasMoveTo())
            {
                return null;
            }

            return e.GetMoveTo();
        }

        internal static NotSolidComponent? TryGetNotSolid(this Entity e)
        {
            if (!e.HasNotSolid())
            {
                return null;
            }

            return e.GetNotSolid();
        }

        internal static OwnerComponent? TryGetOwner(this Entity e)
        {
            if (!e.HasOwner())
            {
                return null;
            }

            return e.GetOwner();
        }

        internal static PositionComponent? TryGetPosition(this Entity e)
        {
            if (!e.HasPosition())
            {
                return null;
            }

            return e.GetPosition();
        }

        internal static PrefabRefComponent? TryGetPrefabRef(this Entity e)
        {
            if (!e.HasPrefabRef())
            {
                return null;
            }

            return e.GetPrefabRef();
        }

        internal static PushAwayComponent? TryGetPushAway(this Entity e)
        {
            if (!e.HasPushAway())
            {
                return null;
            }

            return e.GetPushAway();
        }

        internal static QuadtreeComponent? TryGetQuadtree(this Entity e)
        {
            if (!e.HasQuadtree())
            {
                return null;
            }

            return e.GetQuadtree();
        }

        internal static RectPositionComponent? TryGetRectPosition(this Entity e)
        {
            if (!e.HasRectPosition())
            {
                return null;
            }

            return e.GetRectPosition();
        }

        internal static RequiresVisionComponent? TryGetRequiresVision(this Entity e)
        {
            if (!e.HasRequiresVision())
            {
                return null;
            }

            return e.GetRequiresVision();
        }

        internal static RotateComponent? TryGetRotate(this Entity e)
        {
            if (!e.HasRotate())
            {
                return null;
            }

            return e.GetRotate();
        }

        internal static RuleWatcherComponent? TryGetRuleWatcher(this Entity e)
        {
            if (!e.HasRuleWatcher())
            {
                return null;
            }

            return e.GetRuleWatcher();
        }

        internal static SituationComponent? TryGetSituation(this Entity e)
        {
            if (!e.HasSituation())
            {
                return null;
            }

            return e.GetSituation();
        }

        internal static TextBoxComponent? TryGetTextBox(this Entity e)
        {
            if (!e.HasTextBox())
            {
                return null;
            }

            return e.GetTextBox();
        }

        internal static TextureComponent? TryGetTexture(this Entity e)
        {
            if (!e.HasTexture())
            {
                return null;
            }

            return e.GetTexture();
        }

        internal static TiledEntityComponent? TryGetTiledEntity(this Entity e)
        {
            if (!e.HasTiledEntity())
            {
                return null;
            }

            return e.GetTiledEntity();
        }

        internal static VelocityComponent? TryGetVelocity(this Entity e)
        {
            if (!e.HasVelocity())
            {
                return null;
            }

            return e.GetVelocity();
        }

        internal static WaitForVacancyComponent? TryGetWaitForVacancy(this Entity e)
        {
            if (!e.HasWaitForVacancy())
            {
                return null;
            }

            return e.GetWaitForVacancy();
        }

        internal static IInteractiveComponent? TryGetInteractive(this Entity e)
        {
            if (!e.HasInteractive())
            {
                return null;
            }

            return e.GetInteractive();
        }

        #endregion
        
        #region Component "Set" methods!
        internal static void SetAdvancedCollision(this Entity e, AdvancedCollisionComponent component)
        {
            e.AddOrReplaceComponent(component, 0);
        }

        internal static void SetAgent(this Entity e, AgentComponent component)
        {
            e.AddOrReplaceComponent(component, 1);
        }

        internal static void SetAgent(this Entity e, System.Single speed, System.Single acceleration, System.Single friction)
        {
            e.AddOrReplaceComponent(new AgentComponent(speed, acceleration, friction), 1);
        }

        internal static void SetAgentImpulse(this Entity e, AgentImpulseComponent component)
        {
            e.AddOrReplaceComponent(component, 2);
        }

        internal static void SetAgentImpulse(this Entity e, Murder.Core.Geometry.Vector2 impulse)
        {
            e.AddOrReplaceComponent(new AgentImpulseComponent(impulse), 2);
        }

        internal static void SetAgentSprite(this Entity e, AgentSpriteComponent component)
        {
            e.AddOrReplaceComponent(component, 3);
        }

        internal static void SetAgentSprite(this Entity e)
        {
            e.AddOrReplaceComponent(new AgentSpriteComponent(), 3);
        }

        internal static void SetAlpha(this Entity e, AlphaComponent component)
        {
            e.AddOrReplaceComponent(component, 4);
        }

        internal static void SetAlpha(this Entity e)
        {
            e.AddOrReplaceComponent(new AlphaComponent(), 4);
        }

        internal static void SetAlpha(this Entity e, System.Single[] sources)
        {
            e.AddOrReplaceComponent(new AlphaComponent(sources), 4);
        }

        internal static void SetAlpha(this Entity e, Murder.Components.AlphaSources source, System.Single amount)
        {
            e.AddOrReplaceComponent(new AlphaComponent(source, amount), 4);
        }

        internal static void SetAnimationOverload(this Entity e, AnimationOverloadComponent component)
        {
            e.AddOrReplaceComponent(component, 5);
        }

        internal static void SetAnimationOverload(this Entity e, System.String animationId, System.Boolean loop)
        {
            e.AddOrReplaceComponent(new AnimationOverloadComponent(animationId, loop), 5);
        }

        internal static void SetAnimationOverload(this Entity e, System.String animationId, System.Single duration, System.Boolean loop)
        {
            e.AddOrReplaceComponent(new AnimationOverloadComponent(animationId, duration, loop), 5);
        }

        internal static void SetAnimationOverload(this Entity e, System.Boolean loop, System.String[] animationId)
        {
            e.AddOrReplaceComponent(new AnimationOverloadComponent(loop, animationId), 5);
        }

        internal static void SetAnimationOverload(this Entity e, System.Boolean loop, System.String[] animationId, System.Int32 current)
        {
            e.AddOrReplaceComponent(new AnimationOverloadComponent(loop, animationId, current), 5);
        }

        internal static void SetAseprite(this Entity e, AsepriteComponent component)
        {
            e.AddOrReplaceComponent(component, 6);
        }

        internal static void SetAseprite(this Entity e)
        {
            e.AddOrReplaceComponent(new AsepriteComponent(), 6);
        }

        internal static void SetAseprite(this Entity e, System.Guid guid, Murder.Core.Geometry.Vector2 offset, System.String id, System.Int32 ySortOffset, System.Boolean backAnim, Murder.Core.Graphics.TargetSpriteBatches targetSpriteBatch)
        {
            e.AddOrReplaceComponent(new AsepriteComponent(guid, offset, id, ySortOffset, backAnim, targetSpriteBatch), 6);
        }

        internal static void SetAseprite(this Entity e, System.Guid guid, Murder.Core.Geometry.Vector2 offset, System.Collections.Immutable.ImmutableArray<System.String> id, System.Int32 ySortOffset, System.Boolean backAnim, System.Single time, Murder.Core.Graphics.TargetSpriteBatches targetSpriteBatch)
        {
            e.AddOrReplaceComponent(new AsepriteComponent(guid, offset, id, ySortOffset, backAnim, time, targetSpriteBatch), 6);
        }

        internal static void SetAseprite(this Entity e, System.Guid guid, Murder.Core.Graphics.TargetSpriteBatches targetSpriteBatch)
        {
            e.AddOrReplaceComponent(new AsepriteComponent(guid, targetSpriteBatch), 6);
        }

        internal static void SetAseprite(this Entity e, System.Guid guid, Murder.Core.Geometry.Vector2 offset, System.Collections.Immutable.ImmutableArray<System.String> id, System.Int32 ySortOffset, System.Boolean backAnim, Murder.Core.Graphics.TargetSpriteBatches targetSpriteBatch)
        {
            e.AddOrReplaceComponent(new AsepriteComponent(guid, offset, id, ySortOffset, backAnim, targetSpriteBatch), 6);
        }

        internal static void SetCameraFollow(this Entity e, CameraFollowComponent component)
        {
            e.AddOrReplaceComponent(component, 7);
        }

        internal static void SetCameraFollow(this Entity e)
        {
            e.AddOrReplaceComponent(new CameraFollowComponent(), 7);
        }

        internal static void SetCameraFollow(this Entity e, System.Boolean enabled)
        {
            e.AddOrReplaceComponent(new CameraFollowComponent(enabled), 7);
        }

        internal static void SetCarve(this Entity e, CarveComponent component)
        {
            e.AddOrReplaceComponent(component, 8);
        }

        internal static void SetCarve(this Entity e)
        {
            e.AddOrReplaceComponent(new CarveComponent(), 8);
        }

        internal static void SetCollider(this Entity e, ColliderComponent component)
        {
            e.AddOrReplaceComponent(component, 9);
        }

        internal static void SetCollider(this Entity e)
        {
            e.AddOrReplaceComponent(new ColliderComponent(), 9);
        }

        internal static void SetCollider(this Entity e, System.Collections.Immutable.ImmutableArray<Murder.Core.Geometry.IShape> shapes, System.Boolean solid, Murder.Core.Graphics.Color color)
        {
            e.AddOrReplaceComponent(new ColliderComponent(shapes, solid, color), 9);
        }

        internal static void SetCustomDraw(this Entity e, CustomDrawComponent component)
        {
            e.AddOrReplaceComponent(component, 10);
        }

        internal static void SetCustomDraw(this Entity e, System.Action<Murder.Core.Graphics.RenderContext> draw)
        {
            e.AddOrReplaceComponent(new CustomDrawComponent(draw), 10);
        }

        internal static void SetDestroyOnCollision(this Entity e, DestroyOnCollisionComponent component)
        {
            e.AddOrReplaceComponent(component, 11);
        }

        internal static void SetDrawRectangle(this Entity e, DrawRectangleComponent component)
        {
            e.AddOrReplaceComponent(component, 12);
        }

        internal static void SetDrawRectangle(this Entity e)
        {
            e.AddOrReplaceComponent(new DrawRectangleComponent(), 12);
        }

        internal static void SetFacing(this Entity e, FacingComponent component)
        {
            e.AddOrReplaceComponent(component, 13);
        }

        internal static void SetFacing(this Entity e, System.Boolean flipped, System.Boolean lookingUp)
        {
            e.AddOrReplaceComponent(new FacingComponent(flipped, lookingUp), 13);
        }

        internal static void SetFadeScreen(this Entity e, FadeScreenComponent component)
        {
            e.AddOrReplaceComponent(component, 14);
        }

        internal static void SetFadeScreen(this Entity e, Murder.Components.FadeType fade, System.Single startedTime, System.Single duration)
        {
            e.AddOrReplaceComponent(new FadeScreenComponent(fade, startedTime, duration), 14);
        }

        internal static void SetFadeTransition(this Entity e, FadeTransitionComponent component)
        {
            e.AddOrReplaceComponent(component, 15);
        }

        internal static void SetFadeTransition(this Entity e, System.Single duration, System.Single startAlpha, System.Single targetAlpha)
        {
            e.AddOrReplaceComponent(new FadeTransitionComponent(duration, startAlpha, targetAlpha), 15);
        }

        internal static void SetFadeTransition(this Entity e, System.Single duration, System.Single startAlpha, System.Single targetAlpha, System.Boolean destroyOnEnd)
        {
            e.AddOrReplaceComponent(new FadeTransitionComponent(duration, startAlpha, targetAlpha, destroyOnEnd), 15);
        }

        internal static void SetFadeWhenInArea(this Entity e, FadeWhenInAreaComponent component)
        {
            e.AddOrReplaceComponent(component, 16);
        }

        internal static void SetFadeWhenInArea(this Entity e)
        {
            e.AddOrReplaceComponent(new FadeWhenInAreaComponent(), 16);
        }

        internal static void SetFriction(this Entity e, FrictionComponent component)
        {
            e.AddOrReplaceComponent(component, 17);
        }

        internal static void SetFriction(this Entity e, System.Single amount)
        {
            e.AddOrReplaceComponent(new FrictionComponent(amount), 17);
        }

        internal static void SetGlobalShader(this Entity e, GlobalShaderComponent component)
        {
            e.AddOrReplaceComponent(component, 18);
        }

        internal static void SetGlobalShader(this Entity e)
        {
            e.AddOrReplaceComponent(new GlobalShaderComponent(), 18);
        }

        internal static void SetHAAStarPathfind(this Entity e, HAAStarPathfindComponent component)
        {
            e.AddOrReplaceComponent(component, 19);
        }

        internal static void SetHAAStarPathfind(this Entity e, System.Int32 width, System.Int32 height)
        {
            e.AddOrReplaceComponent(new HAAStarPathfindComponent(width, height), 19);
        }

        internal static void SetHasVision(this Entity e, HasVisionComponent component)
        {
            e.AddOrReplaceComponent(component, 20);
        }

        internal static void SetHasVision(this Entity e)
        {
            e.AddOrReplaceComponent(new HasVisionComponent(), 20);
        }

        internal static void SetInteractOnButtonPress(this Entity e, InteractOnButtonPress component)
        {
            e.AddOrReplaceComponent(component, 21);
        }

        internal static void SetInteractOnRuleMatch(this Entity e, InteractOnRuleMatchComponent component)
        {
            e.AddOrReplaceComponent(component, 22);
        }

        internal static void SetInteractOnRuleMatch(this Entity e)
        {
            e.AddOrReplaceComponent(new InteractOnRuleMatchComponent(), 22);
        }

        internal static void SetInteractOnRuleMatch(this Entity e, Murder.Core.Dialogs.CriterionNode[] criteria)
        {
            e.AddOrReplaceComponent(new InteractOnRuleMatchComponent(criteria), 22);
        }

        internal static void SetInteractOnStart(this Entity e, InteractOnStartComponent component)
        {
            e.AddOrReplaceComponent(component, 23);
        }

        internal static void SetInteractor(this Entity e, InteractorComponent component)
        {
            e.AddOrReplaceComponent(component, 24);
        }

        internal static void SetItemHighlighted(this Entity e, ItemHighlightedComponent component)
        {
            e.AddOrReplaceComponent(component, 25);
        }

        internal static void SetLastSeen(this Entity e, LastSeenComponent component)
        {
            e.AddOrReplaceComponent(component, 26);
        }

        internal static void SetLastSeen(this Entity e)
        {
            e.AddOrReplaceComponent(new LastSeenComponent(), 26);
        }

        internal static void SetLastSeen(this Entity e, System.Single time)
        {
            e.AddOrReplaceComponent(new LastSeenComponent(time), 26);
        }

        internal static void SetLine(this Entity e, LineComponent component)
        {
            e.AddOrReplaceComponent(component, 27);
        }

        internal static void SetLine(this Entity e, Murder.Core.Dialogs.Line line, System.Single start)
        {
            e.AddOrReplaceComponent(new LineComponent(line, start), 27);
        }

        internal static void SetMap(this Entity e, MapComponent component)
        {
            e.AddOrReplaceComponent(component, 28);
        }

        internal static void SetMap(this Entity e, System.Int32 width, System.Int32 height)
        {
            e.AddOrReplaceComponent(new MapComponent(width, height), 28);
        }

        internal static void SetMapDimensions(this Entity e, MapDimensionsComponent component)
        {
            e.AddOrReplaceComponent(component, 29);
        }

        internal static void SetMapDimensions(this Entity e, System.Int32 width, System.Int32 height)
        {
            e.AddOrReplaceComponent(new MapDimensionsComponent(width, height), 29);
        }

        internal static void SetMapTheme(this Entity e, MapThemeComponent component)
        {
            e.AddOrReplaceComponent(component, 30);
        }

        internal static void SetMapTheme(this Entity e, System.Guid tileset, System.Guid floor)
        {
            e.AddOrReplaceComponent(new MapThemeComponent(tileset, floor), 30);
        }

        internal static void SetMoveTo(this Entity e, MoveToComponent component)
        {
            e.AddOrReplaceComponent(component, 31);
        }

        internal static void SetMoveTo(this Entity e, in Murder.Core.Geometry.Vector2 target, System.Single maxSpeed, System.Single accel)
        {
            e.AddOrReplaceComponent(new MoveToComponent(target, maxSpeed, accel), 31);
        }

        internal static void SetNotSolid(this Entity e, NotSolidComponent component)
        {
            e.AddOrReplaceComponent(component, 32);
        }

        internal static void SetOwner(this Entity e, OwnerComponent component)
        {
            e.AddOrReplaceComponent(component, 33);
        }

        internal static void SetOwner(this Entity e, System.Int32 owner)
        {
            e.AddOrReplaceComponent(new OwnerComponent(owner), 33);
        }

        internal static void SetPosition(this Entity e, PositionComponent component)
        {
            e.AddOrReplaceComponent(component, 34);
        }

        internal static void SetPosition(this Entity e, System.Single x, System.Single y, Bang.Components.IComponent parent)
        {
            e.AddOrReplaceComponent(new PositionComponent(x, y, parent), 34);
        }

        internal static void SetPosition(this Entity e, Murder.Core.Geometry.Vector2 v)
        {
            e.AddOrReplaceComponent(new PositionComponent(v), 34);
        }

        internal static void SetPosition(this Entity e, Murder.Core.Geometry.Point p)
        {
            e.AddOrReplaceComponent(new PositionComponent(p), 34);
        }

        internal static void SetPrefabRef(this Entity e, PrefabRefComponent component)
        {
            e.AddOrReplaceComponent(component, 35);
        }

        internal static void SetPrefabRef(this Entity e, System.Guid assetGui)
        {
            e.AddOrReplaceComponent(new PrefabRefComponent(assetGui), 35);
        }

        internal static void SetPushAway(this Entity e, PushAwayComponent component)
        {
            e.AddOrReplaceComponent(component, 36);
        }

        internal static void SetPushAway(this Entity e, System.Int32 size, System.Int32 strength)
        {
            e.AddOrReplaceComponent(new PushAwayComponent(size, strength), 36);
        }

        internal static void SetQuadtree(this Entity e, QuadtreeComponent component)
        {
            e.AddOrReplaceComponent(component, 37);
        }

        internal static void SetQuadtree(this Entity e, Murder.Core.Geometry.Rectangle size)
        {
            e.AddOrReplaceComponent(new QuadtreeComponent(size), 37);
        }

        internal static void SetRectPosition(this Entity e, RectPositionComponent component)
        {
            e.AddOrReplaceComponent(component, 38);
        }

        internal static void SetRectPosition(this Entity e, System.Single top, System.Single left, System.Single bottom, System.Single right, Murder.Core.Geometry.Vector2 size, Murder.Core.Geometry.Vector2 origin, Bang.Components.IComponent parent)
        {
            e.AddOrReplaceComponent(new RectPositionComponent(top, left, bottom, right, size, origin, parent), 38);
        }

        internal static void SetRequiresVision(this Entity e, RequiresVisionComponent component)
        {
            e.AddOrReplaceComponent(component, 39);
        }

        internal static void SetRotate(this Entity e, RotateComponent component)
        {
            e.AddOrReplaceComponent(component, 40);
        }

        internal static void SetRotate(this Entity e)
        {
            e.AddOrReplaceComponent(new RotateComponent(), 40);
        }

        internal static void SetRotate(this Entity e, System.Single rotation)
        {
            e.AddOrReplaceComponent(new RotateComponent(rotation), 40);
        }

        internal static void SetRuleWatcher(this Entity e, RuleWatcherComponent component)
        {
            e.AddOrReplaceComponent(component, 41);
        }

        internal static void SetSituation(this Entity e, SituationComponent component)
        {
            e.AddOrReplaceComponent(component, 42);
        }

        internal static void SetSituation(this Entity e)
        {
            e.AddOrReplaceComponent(new SituationComponent(), 42);
        }

        internal static void SetSituation(this Entity e, System.Guid character, System.Int32 situation)
        {
            e.AddOrReplaceComponent(new SituationComponent(character, situation), 42);
        }

        internal static void SetTextBox(this Entity e, TextBoxComponent component)
        {
            e.AddOrReplaceComponent(component, 43);
        }

        internal static void SetTextBox(this Entity e, System.String text, System.Int32 visibleCaracters, System.Single fontSize, System.Single sorting, Murder.Core.Graphics.Color color, Murder.Core.Geometry.Vector2 offset)
        {
            e.AddOrReplaceComponent(new TextBoxComponent(text, visibleCaracters, fontSize, sorting, color, offset), 43);
        }

        internal static void SetTexture(this Entity e, TextureComponent component)
        {
            e.AddOrReplaceComponent(component, 44);
        }

        internal static void SetTexture(this Entity e, System.String texture, Murder.Core.Geometry.Vector2 offset)
        {
            e.AddOrReplaceComponent(new TextureComponent(texture, offset), 44);
        }

        internal static void SetTiledEntity(this Entity e, TiledEntityComponent component)
        {
            e.AddOrReplaceComponent(component, 45);
        }

        internal static void SetVelocity(this Entity e, VelocityComponent component)
        {
            e.AddOrReplaceComponent(component, 46);
        }

        internal static void SetVelocity(this Entity e, Murder.Core.Geometry.Vector2 velocity)
        {
            e.AddOrReplaceComponent(new VelocityComponent(velocity), 46);
        }

        internal static void SetVelocity(this Entity e, System.Single x, System.Single y)
        {
            e.AddOrReplaceComponent(new VelocityComponent(x, y), 46);
        }

        internal static void SetWaitForVacancy(this Entity e, WaitForVacancyComponent component)
        {
            e.AddOrReplaceComponent(component, 47);
        }

        internal static void SetWaitForVacancy(this Entity e, System.Boolean alertParent)
        {
            e.AddOrReplaceComponent(new WaitForVacancyComponent(alertParent), 47);
        }

        internal static void SetInteractive(this Entity e, IInteractiveComponent component)
        {
            e.AddOrReplaceComponent(component, 48);
        }

        #endregion
        
        #region Component "Remove" methods!
        internal static bool RemoveAdvancedCollision(this Entity e)
        {
            return e.RemoveComponent(0);
        }

        internal static bool RemoveAgent(this Entity e)
        {
            return e.RemoveComponent(1);
        }

        internal static bool RemoveAgentImpulse(this Entity e)
        {
            return e.RemoveComponent(2);
        }

        internal static bool RemoveAgentSprite(this Entity e)
        {
            return e.RemoveComponent(3);
        }

        internal static bool RemoveAlpha(this Entity e)
        {
            return e.RemoveComponent(4);
        }

        internal static bool RemoveAnimationOverload(this Entity e)
        {
            return e.RemoveComponent(5);
        }

        internal static bool RemoveAseprite(this Entity e)
        {
            return e.RemoveComponent(6);
        }

        internal static bool RemoveCameraFollow(this Entity e)
        {
            return e.RemoveComponent(7);
        }

        internal static bool RemoveCarve(this Entity e)
        {
            return e.RemoveComponent(8);
        }

        internal static bool RemoveCollider(this Entity e)
        {
            return e.RemoveComponent(9);
        }

        internal static bool RemoveCustomDraw(this Entity e)
        {
            return e.RemoveComponent(10);
        }

        internal static bool RemoveDestroyOnCollision(this Entity e)
        {
            return e.RemoveComponent(11);
        }

        internal static bool RemoveDrawRectangle(this Entity e)
        {
            return e.RemoveComponent(12);
        }

        internal static bool RemoveFacing(this Entity e)
        {
            return e.RemoveComponent(13);
        }

        internal static bool RemoveFadeScreen(this Entity e)
        {
            return e.RemoveComponent(14);
        }

        internal static bool RemoveFadeTransition(this Entity e)
        {
            return e.RemoveComponent(15);
        }

        internal static bool RemoveFadeWhenInArea(this Entity e)
        {
            return e.RemoveComponent(16);
        }

        internal static bool RemoveFriction(this Entity e)
        {
            return e.RemoveComponent(17);
        }

        internal static bool RemoveGlobalShader(this Entity e)
        {
            return e.RemoveComponent(18);
        }

        internal static bool RemoveHAAStarPathfind(this Entity e)
        {
            return e.RemoveComponent(19);
        }

        internal static bool RemoveHasVision(this Entity e)
        {
            return e.RemoveComponent(20);
        }

        internal static bool RemoveInteractOnButtonPress(this Entity e)
        {
            return e.RemoveComponent(21);
        }

        internal static bool RemoveInteractOnRuleMatch(this Entity e)
        {
            return e.RemoveComponent(22);
        }

        internal static bool RemoveInteractOnStart(this Entity e)
        {
            return e.RemoveComponent(23);
        }

        internal static bool RemoveInteractor(this Entity e)
        {
            return e.RemoveComponent(24);
        }

        internal static bool RemoveItemHighlighted(this Entity e)
        {
            return e.RemoveComponent(25);
        }

        internal static bool RemoveLastSeen(this Entity e)
        {
            return e.RemoveComponent(26);
        }

        internal static bool RemoveLine(this Entity e)
        {
            return e.RemoveComponent(27);
        }

        internal static bool RemoveMap(this Entity e)
        {
            return e.RemoveComponent(28);
        }

        internal static bool RemoveMapDimensions(this Entity e)
        {
            return e.RemoveComponent(29);
        }

        internal static bool RemoveMapTheme(this Entity e)
        {
            return e.RemoveComponent(30);
        }

        internal static bool RemoveMoveTo(this Entity e)
        {
            return e.RemoveComponent(31);
        }

        internal static bool RemoveNotSolid(this Entity e)
        {
            return e.RemoveComponent(32);
        }

        internal static bool RemoveOwner(this Entity e)
        {
            return e.RemoveComponent(33);
        }

        internal static bool RemovePosition(this Entity e)
        {
            return e.RemoveComponent(34);
        }

        internal static bool RemovePrefabRef(this Entity e)
        {
            return e.RemoveComponent(35);
        }

        internal static bool RemovePushAway(this Entity e)
        {
            return e.RemoveComponent(36);
        }

        internal static bool RemoveQuadtree(this Entity e)
        {
            return e.RemoveComponent(37);
        }

        internal static bool RemoveRectPosition(this Entity e)
        {
            return e.RemoveComponent(38);
        }

        internal static bool RemoveRequiresVision(this Entity e)
        {
            return e.RemoveComponent(39);
        }

        internal static bool RemoveRotate(this Entity e)
        {
            return e.RemoveComponent(40);
        }

        internal static bool RemoveRuleWatcher(this Entity e)
        {
            return e.RemoveComponent(41);
        }

        internal static bool RemoveSituation(this Entity e)
        {
            return e.RemoveComponent(42);
        }

        internal static bool RemoveTextBox(this Entity e)
        {
            return e.RemoveComponent(43);
        }

        internal static bool RemoveTexture(this Entity e)
        {
            return e.RemoveComponent(44);
        }

        internal static bool RemoveTiledEntity(this Entity e)
        {
            return e.RemoveComponent(45);
        }

        internal static bool RemoveVelocity(this Entity e)
        {
            return e.RemoveComponent(46);
        }

        internal static bool RemoveWaitForVacancy(this Entity e)
        {
            return e.RemoveComponent(47);
        }

        internal static bool RemoveInteractive(this Entity e)
        {
            return e.RemoveComponent(48);
        }

        #endregion

        #region Message "Has" checkers!
        internal static bool HasAnimationCompleteMessage(this Entity e)
        {
            return e.HasMessage(49);
        }

        internal static bool HasHighlightMessage(this Entity e)
        {
            return e.HasMessage(50);
        }

        internal static bool HasInteractorMessage(this Entity e)
        {
            return e.HasMessage(51);
        }

        #endregion
    }

    public class LookupImplementation : ComponentsLookup
    {
        private static readonly ImmutableHashSet<int> _relativeComponents = new HashSet<int>()
        {
            34,
            38
        }.ToImmutableHashSet();

        public override ImmutableHashSet<int> RelativeComponents => _relativeComponents;

        private static readonly ImmutableDictionary<Type, int> _componentsIndex = new Dictionary<Type, int>()
        {
            { typeof(AdvancedCollisionComponent), 0 },
            { typeof(AgentComponent), 1 },
            { typeof(AgentImpulseComponent), 2 },
            { typeof(AgentSpriteComponent), 3 },
            { typeof(AlphaComponent), 4 },
            { typeof(AnimationOverloadComponent), 5 },
            { typeof(AsepriteComponent), 6 },
            { typeof(CameraFollowComponent), 7 },
            { typeof(CarveComponent), 8 },
            { typeof(ColliderComponent), 9 },
            { typeof(CustomDrawComponent), 10 },
            { typeof(DestroyOnCollisionComponent), 11 },
            { typeof(DrawRectangleComponent), 12 },
            { typeof(FacingComponent), 13 },
            { typeof(FadeScreenComponent), 14 },
            { typeof(FadeTransitionComponent), 15 },
            { typeof(FadeWhenInAreaComponent), 16 },
            { typeof(FrictionComponent), 17 },
            { typeof(GlobalShaderComponent), 18 },
            { typeof(HAAStarPathfindComponent), 19 },
            { typeof(HasVisionComponent), 20 },
            { typeof(InteractOnButtonPress), 21 },
            { typeof(InteractOnRuleMatchComponent), 22 },
            { typeof(InteractOnStartComponent), 23 },
            { typeof(InteractorComponent), 24 },
            { typeof(ItemHighlightedComponent), 25 },
            { typeof(LastSeenComponent), 26 },
            { typeof(LineComponent), 27 },
            { typeof(MapComponent), 28 },
            { typeof(MapDimensionsComponent), 29 },
            { typeof(MapThemeComponent), 30 },
            { typeof(MoveToComponent), 31 },
            { typeof(NotSolidComponent), 32 },
            { typeof(OwnerComponent), 33 },
            { typeof(PositionComponent), 34 },
            { typeof(PrefabRefComponent), 35 },
            { typeof(PushAwayComponent), 36 },
            { typeof(QuadtreeComponent), 37 },
            { typeof(RectPositionComponent), 38 },
            { typeof(RequiresVisionComponent), 39 },
            { typeof(RotateComponent), 40 },
            { typeof(RuleWatcherComponent), 41 },
            { typeof(SituationComponent), 42 },
            { typeof(TextBoxComponent), 43 },
            { typeof(TextureComponent), 44 },
            { typeof(TiledEntityComponent), 45 },
            { typeof(VelocityComponent), 46 },
            { typeof(WaitForVacancyComponent), 47 },
            { typeof(IInteractiveComponent), 48 },
            { typeof(InteractiveComponent<TalkToInteraction>), 48 }
        }.ToImmutableDictionary();

        protected override ImmutableDictionary<Type, int> ComponentsIndex => _componentsIndex;

        private static readonly ImmutableDictionary<Type, int> _messagesIndex = new Dictionary<Type, int>()
        {
            { typeof(AnimationCompleteMessage), 49 },
            { typeof(HighlightMessage), 50 },
            { typeof(InteractorMessage), 51 }
        }.ToImmutableDictionary();

        protected override ImmutableDictionary<Type, int> MessagesIndex => _messagesIndex;
    }
}