/*             |￣￣￣￣￣￣\                                                                  *
 *             |    STOP   |                                                                 *
 *             |   EDITING |                                                                 *
 *             |    THIS   |                                                                 *
 *             |    FILE   |                                                                 *
 *             | ＿＿＿＿＿ /                                                                 *
 *             (\__/)  ||                                                                    *
 *             (•ㅅ•)  ||                                                                    *
 *             / 　 づ                                                                       *
 *             ￣￣￣                                                                         *
 * This code was generated by our own generator! In order to modify this, please run the     *
 * generator with whatever settings you want.                                                *
 *                                                                                           */

using Murder.Components;
using Bang.Interactions;
using Bang.StateMachines;
using Murder.Editor.Components;
using Murder.StateMachines;
using Murder.Interactions;
using Murder.Messages;
using Bang.Components;
using System.Collections.Immutable;

namespace Bang.Entities
{
    public enum Murder_EditorComponentType
    {
        DebugColor = 52,
        Editor = 53,
        ShowColliderHandles = 54,
        ShowYSort = 55
    }

    public enum Murder_EditorMessageType
    {
        
    }

    public static class Murder_EditorEntityExtensions
    {
        #region Component "Get" methods!
        public static DebugColorComponent GetDebugColor(this Entity e)
        {
            return e.GetComponent<DebugColorComponent>(52);
        }

        public static EditorComponent GetEditor(this Entity e)
        {
            return e.GetComponent<EditorComponent>(53);
        }

        public static ShowColliderHandlesComponent GetShowColliderHandles(this Entity e)
        {
            return e.GetComponent<ShowColliderHandlesComponent>(54);
        }

        public static ShowYSortComponent GetShowYSort(this Entity e)
        {
            return e.GetComponent<ShowYSortComponent>(55);
        }

        #endregion
        
        #region Component "Has" checkers!
        public static bool HasDebugColor(this Entity e)
        {
            return e.HasComponent(52);
        }

        public static bool HasEditor(this Entity e)
        {
            return e.HasComponent(53);
        }

        public static bool HasShowColliderHandles(this Entity e)
        {
            return e.HasComponent(54);
        }

        public static bool HasShowYSort(this Entity e)
        {
            return e.HasComponent(55);
        }

        #endregion
        
        #region Component "TryGet" methods!
        public static DebugColorComponent? TryGetDebugColor(this Entity e)
        {
            if (!e.HasDebugColor())
            {
                return null;
            }

            return e.GetDebugColor();
        }

        public static EditorComponent? TryGetEditor(this Entity e)
        {
            if (!e.HasEditor())
            {
                return null;
            }

            return e.GetEditor();
        }

        public static ShowColliderHandlesComponent? TryGetShowColliderHandles(this Entity e)
        {
            if (!e.HasShowColliderHandles())
            {
                return null;
            }

            return e.GetShowColliderHandles();
        }

        public static ShowYSortComponent? TryGetShowYSort(this Entity e)
        {
            if (!e.HasShowYSort())
            {
                return null;
            }

            return e.GetShowYSort();
        }

        #endregion
        
        #region Component "Set" methods!
        public static void SetDebugColor(this Entity e, DebugColorComponent component)
        {
            e.AddOrReplaceComponent(component, 52);
        }

        public static void SetDebugColor(this Entity e, Murder.Core.Graphics.Color color)
        {
            e.AddOrReplaceComponent(new DebugColorComponent(color), 52);
        }

        public static void SetEditor(this Entity e, EditorComponent component)
        {
            e.AddOrReplaceComponent(component, 53);
        }

        public static void SetEditor(this Entity e)
        {
            e.AddOrReplaceComponent(new EditorComponent(), 53);
        }

        public static void SetShowColliderHandles(this Entity e, ShowColliderHandlesComponent component)
        {
            e.AddOrReplaceComponent(component, 54);
        }

        public static void SetShowYSort(this Entity e, ShowYSortComponent component)
        {
            e.AddOrReplaceComponent(component, 55);
        }

        #endregion
        
        #region Component "Remove" methods!
        public static bool RemoveDebugColor(this Entity e)
        {
            return e.RemoveComponent(52);
        }

        public static bool RemoveEditor(this Entity e)
        {
            return e.RemoveComponent(53);
        }

        public static bool RemoveShowColliderHandles(this Entity e)
        {
            return e.RemoveComponent(54);
        }

        public static bool RemoveShowYSort(this Entity e)
        {
            return e.RemoveComponent(55);
        }

        #endregion

        #region Message "Has" checkers!
        
        #endregion
    }

    public class Murder_EditorLookupImplementation : MurderLookupImplementation
    {
        private static readonly ImmutableHashSet<int> _relativeComponents = new HashSet<int>()
        {
            31,
            35
        }.ToImmutableHashSet();

        public override ImmutableHashSet<int> RelativeComponents => _relativeComponents;

        private static readonly ImmutableDictionary<Type, int> _componentsIndex = new Dictionary<Type, int>()
        {
            { typeof(AdvancedCollisionComponent), 0 },
            { typeof(AgentComponent), 1 },
            { typeof(AgentImpulseComponent), 2 },
            { typeof(AlphaComponent), 3 },
            { typeof(AnimationOverloadComponent), 4 },
            { typeof(AsepriteComponent), 5 },
            { typeof(CameraFollowComponent), 6 },
            { typeof(CarveComponent), 7 },
            { typeof(ColliderComponent), 8 },
            { typeof(CustomDrawComponent), 9 },
            { typeof(DestroyOnCollisionComponent), 10 },
            { typeof(DrawRectangleComponent), 11 },
            { typeof(FadeScreenComponent), 12 },
            { typeof(FadeTransitionComponent), 13 },
            { typeof(FadeWhenInAreaComponent), 14 },
            { typeof(FrictionComponent), 15 },
            { typeof(GlobalShaderComponent), 16 },
            { typeof(HAAStarPathfindComponent), 17 },
            { typeof(HasVisionComponent), 18 },
            { typeof(InteractOnButtonPress), 19 },
            { typeof(InteractOnRuleMatchComponent), 20 },
            { typeof(InteractOnStartComponent), 21 },
            { typeof(InteractorComponent), 22 },
            { typeof(ItemHighlightedComponent), 23 },
            { typeof(LastSeenComponent), 24 },
            { typeof(LineComponent), 25 },
            { typeof(MapComponent), 26 },
            { typeof(MapDimensionsComponent), 27 },
            { typeof(MapThemeComponent), 28 },
            { typeof(MoveToComponent), 29 },
            { typeof(NotSolidComponent), 30 },
            { typeof(PositionComponent), 31 },
            { typeof(PrefabRefComponent), 32 },
            { typeof(PushAwayComponent), 33 },
            { typeof(QuadtreeComponent), 34 },
            { typeof(RectPositionComponent), 35 },
            { typeof(RequiresVisionComponent), 36 },
            { typeof(RotateComponent), 37 },
            { typeof(RuleWatcherComponent), 38 },
            { typeof(SituationComponent), 39 },
            { typeof(TextBoxComponent), 40 },
            { typeof(TextureComponent), 41 },
            { typeof(TiledEntityComponent), 42 },
            { typeof(VelocityComponent), 43 },
            { typeof(WaitForVacancyComponent), 44 },
            { typeof(IStateMachineComponent), 45 },
            { typeof(IInteractiveComponent), 46 },
            { typeof(DebugColorComponent), 52 },
            { typeof(EditorComponent), 53 },
            { typeof(ShowColliderHandlesComponent), 54 },
            { typeof(ShowYSortComponent), 55 },
            { typeof(StateMachineComponent<DialogStateMachine>), 45 },
            { typeof(InteractiveComponent<TalkToInteraction>), 46 }
        }.ToImmutableDictionary();

        protected override ImmutableDictionary<Type, int> ComponentsIndex => _componentsIndex;

        private static readonly ImmutableDictionary<Type, int> _messagesIndex = new Dictionary<Type, int>()
        {
            { typeof(AnimationCompleteMessage), 47 },
            { typeof(CollidedWithMessage), 48 },
            { typeof(HighlightMessage), 49 },
            { typeof(InteractorMessage), 50 },
            { typeof(NextDialogMessage), 51 }
        }.ToImmutableDictionary();

        protected override ImmutableDictionary<Type, int> MessagesIndex => _messagesIndex;
    }
}